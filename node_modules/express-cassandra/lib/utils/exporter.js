'use strict';

var Promise = require('bluebird');
var fs = require('fs');
var path = require('path');
var jsonStream = require('JSONStream');
var debug = require('debug')('express-cassandra');

var exporter = {
  processTableExport(systemClient, fixtureDirectory, keyspace, table) {
    debug('==================================================');
    debug(`Reading table: ${table}`);
    return new Promise(function (resolve, reject) {
      var jsonfile = fs.createWriteStream(path.join(fixtureDirectory, `${table}.json`));
      jsonfile.on('error', function (err) {
        reject(err);
      });

      var processed = 0;
      var startTime = Date.now();
      jsonfile.on('finish', function () {
        var timeTaken = (Date.now() - startTime) / 1000;
        var throughput = timeTaken ? processed / timeTaken : 0.00;
        debug(`Done with table, throughput: ${throughput.toFixed(1)} rows/s`);
        resolve();
      });

      var writeStream = jsonStream.stringify('[', ',', ']');
      writeStream.pipe(jsonfile);

      var query = `SELECT * FROM "${keyspace}"."${table}"`;
      var options = { prepare: true, fetchSize: 1000 };

      systemClient.eachRow(query, [], options, function (n, row) {
        var rowObject = {};
        row.forEach(function (value, key) {
          rowObject[key] = value;
        });
        processed++;
        writeStream.write(rowObject);
      }, function (err, result) {
        if (err) {
          reject(err);
          return;
        }

        debug(`Streaming ${processed} rows to: ${table}.json`);

        if (result.nextPage) {
          result.nextPage();
          return;
        }

        debug(`Finalizing writes into: ${table}.json`);
        writeStream.end();
      });
    });
  }
};

module.exports = exporter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9leHBvcnRlci5qcyJdLCJuYW1lcyI6WyJQcm9taXNlIiwicmVxdWlyZSIsImZzIiwicGF0aCIsImpzb25TdHJlYW0iLCJkZWJ1ZyIsImV4cG9ydGVyIiwicHJvY2Vzc1RhYmxlRXhwb3J0Iiwic3lzdGVtQ2xpZW50IiwiZml4dHVyZURpcmVjdG9yeSIsImtleXNwYWNlIiwidGFibGUiLCJyZXNvbHZlIiwicmVqZWN0IiwianNvbmZpbGUiLCJjcmVhdGVXcml0ZVN0cmVhbSIsImpvaW4iLCJvbiIsImVyciIsInByb2Nlc3NlZCIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJ0aW1lVGFrZW4iLCJ0aHJvdWdocHV0IiwidG9GaXhlZCIsIndyaXRlU3RyZWFtIiwic3RyaW5naWZ5IiwicGlwZSIsInF1ZXJ5Iiwib3B0aW9ucyIsInByZXBhcmUiLCJmZXRjaFNpemUiLCJlYWNoUm93IiwibiIsInJvdyIsInJvd09iamVjdCIsImZvckVhY2giLCJ2YWx1ZSIsImtleSIsIndyaXRlIiwicmVzdWx0IiwibmV4dFBhZ2UiLCJlbmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLFVBQVVDLFFBQVEsVUFBUixDQUFoQjtBQUNBLElBQU1DLEtBQUtELFFBQVEsSUFBUixDQUFYO0FBQ0EsSUFBTUUsT0FBT0YsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNRyxhQUFhSCxRQUFRLFlBQVIsQ0FBbkI7QUFDQSxJQUFNSSxRQUFRSixRQUFRLE9BQVIsRUFBaUIsbUJBQWpCLENBQWQ7O0FBRUEsSUFBTUssV0FBVztBQUNmQyxxQkFBbUJDLFlBQW5CLEVBQWlDQyxnQkFBakMsRUFBbURDLFFBQW5ELEVBQTZEQyxLQUE3RCxFQUFvRTtBQUNsRU4sVUFBTSxvREFBTjtBQUNBQSxVQUFPLGtCQUFpQk0sS0FBTSxFQUE5QjtBQUNBLFdBQU8sSUFBSVgsT0FBSixDQUFZLFVBQUNZLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxVQUFNQyxXQUFXWixHQUFHYSxpQkFBSCxDQUFxQlosS0FBS2EsSUFBTCxDQUFVUCxnQkFBVixFQUE2QixHQUFFRSxLQUFNLE9BQXJDLENBQXJCLENBQWpCO0FBQ0FHLGVBQVNHLEVBQVQsQ0FBWSxPQUFaLEVBQXFCLFVBQUNDLEdBQUQsRUFBUztBQUM1QkwsZUFBT0ssR0FBUDtBQUNELE9BRkQ7O0FBSUEsVUFBSUMsWUFBWSxDQUFoQjtBQUNBLFVBQU1DLFlBQVlDLEtBQUtDLEdBQUwsRUFBbEI7QUFDQVIsZUFBU0csRUFBVCxDQUFZLFFBQVosRUFBc0IsWUFBTTtBQUMxQixZQUFNTSxZQUFZLENBQUNGLEtBQUtDLEdBQUwsS0FBYUYsU0FBZCxJQUEyQixJQUE3QztBQUNBLFlBQU1JLGFBQWFELFlBQVlKLFlBQVlJLFNBQXhCLEdBQW9DLElBQXZEO0FBQ0FsQixjQUFPLGdDQUErQm1CLFdBQVdDLE9BQVgsQ0FBbUIsQ0FBbkIsQ0FBc0IsU0FBNUQ7QUFDQWI7QUFDRCxPQUxEOztBQU9BLFVBQU1jLGNBQWN0QixXQUFXdUIsU0FBWCxDQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQixDQUFwQjtBQUNBRCxrQkFBWUUsSUFBWixDQUFpQmQsUUFBakI7O0FBRUEsVUFBTWUsUUFBUyxrQkFBaUJuQixRQUFTLE1BQUtDLEtBQU0sR0FBcEQ7QUFDQSxVQUFNbUIsVUFBVSxFQUFFQyxTQUFTLElBQVgsRUFBaUJDLFdBQVcsSUFBNUIsRUFBaEI7O0FBRUF4QixtQkFBYXlCLE9BQWIsQ0FBcUJKLEtBQXJCLEVBQTRCLEVBQTVCLEVBQWdDQyxPQUFoQyxFQUF5QyxVQUFDSSxDQUFELEVBQUlDLEdBQUosRUFBWTtBQUNuRCxZQUFNQyxZQUFZLEVBQWxCO0FBQ0FELFlBQUlFLE9BQUosQ0FBWSxVQUFDQyxLQUFELEVBQVFDLEdBQVIsRUFBZ0I7QUFDMUJILG9CQUFVRyxHQUFWLElBQWlCRCxLQUFqQjtBQUNELFNBRkQ7QUFHQW5CO0FBQ0FPLG9CQUFZYyxLQUFaLENBQWtCSixTQUFsQjtBQUNELE9BUEQsRUFPRyxVQUFDbEIsR0FBRCxFQUFNdUIsTUFBTixFQUFpQjtBQUNsQixZQUFJdkIsR0FBSixFQUFTO0FBQ1BMLGlCQUFPSyxHQUFQO0FBQ0E7QUFDRDs7QUFFRGIsY0FBTyxhQUFZYyxTQUFVLGFBQVlSLEtBQU0sT0FBL0M7O0FBRUEsWUFBSThCLE9BQU9DLFFBQVgsRUFBcUI7QUFDbkJELGlCQUFPQyxRQUFQO0FBQ0E7QUFDRDs7QUFFRHJDLGNBQU8sMkJBQTBCTSxLQUFNLE9BQXZDO0FBQ0FlLG9CQUFZaUIsR0FBWjtBQUNELE9BdEJEO0FBdUJELEtBNUNNLENBQVA7QUE2Q0Q7QUFqRGMsQ0FBakI7O0FBb0RBQyxPQUFPQyxPQUFQLEdBQWlCdkMsUUFBakIiLCJmaWxlIjoiZXhwb3J0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBqc29uU3RyZWFtID0gcmVxdWlyZSgnSlNPTlN0cmVhbScpO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdleHByZXNzLWNhc3NhbmRyYScpO1xuXG5jb25zdCBleHBvcnRlciA9IHtcbiAgcHJvY2Vzc1RhYmxlRXhwb3J0KHN5c3RlbUNsaWVudCwgZml4dHVyZURpcmVjdG9yeSwga2V5c3BhY2UsIHRhYmxlKSB7XG4gICAgZGVidWcoJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Jyk7XG4gICAgZGVidWcoYFJlYWRpbmcgdGFibGU6ICR7dGFibGV9YCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGpzb25maWxlID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0ocGF0aC5qb2luKGZpeHR1cmVEaXJlY3RvcnksIGAke3RhYmxlfS5qc29uYCkpO1xuICAgICAganNvbmZpbGUub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgcHJvY2Vzc2VkID0gMDtcbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICBqc29uZmlsZS5vbignZmluaXNoJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB0aW1lVGFrZW4gPSAoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSkgLyAxMDAwO1xuICAgICAgICBjb25zdCB0aHJvdWdocHV0ID0gdGltZVRha2VuID8gcHJvY2Vzc2VkIC8gdGltZVRha2VuIDogMC4wMDtcbiAgICAgICAgZGVidWcoYERvbmUgd2l0aCB0YWJsZSwgdGhyb3VnaHB1dDogJHt0aHJvdWdocHV0LnRvRml4ZWQoMSl9IHJvd3Mvc2ApO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgd3JpdGVTdHJlYW0gPSBqc29uU3RyZWFtLnN0cmluZ2lmeSgnWycsICcsJywgJ10nKTtcbiAgICAgIHdyaXRlU3RyZWFtLnBpcGUoanNvbmZpbGUpO1xuXG4gICAgICBjb25zdCBxdWVyeSA9IGBTRUxFQ1QgKiBGUk9NIFwiJHtrZXlzcGFjZX1cIi5cIiR7dGFibGV9XCJgO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgcHJlcGFyZTogdHJ1ZSwgZmV0Y2hTaXplOiAxMDAwIH07XG5cbiAgICAgIHN5c3RlbUNsaWVudC5lYWNoUm93KHF1ZXJ5LCBbXSwgb3B0aW9ucywgKG4sIHJvdykgPT4ge1xuICAgICAgICBjb25zdCByb3dPYmplY3QgPSB7fTtcbiAgICAgICAgcm93LmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICByb3dPYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJvY2Vzc2VkKys7XG4gICAgICAgIHdyaXRlU3RyZWFtLndyaXRlKHJvd09iamVjdCk7XG4gICAgICB9LCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlYnVnKGBTdHJlYW1pbmcgJHtwcm9jZXNzZWR9IHJvd3MgdG86ICR7dGFibGV9Lmpzb25gKTtcblxuICAgICAgICBpZiAocmVzdWx0Lm5leHRQYWdlKSB7XG4gICAgICAgICAgcmVzdWx0Lm5leHRQYWdlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVidWcoYEZpbmFsaXppbmcgd3JpdGVzIGludG86ICR7dGFibGV9Lmpzb25gKTtcbiAgICAgICAgd3JpdGVTdHJlYW0uZW5kKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iXX0=