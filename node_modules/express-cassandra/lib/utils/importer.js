'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var util = require('util');
var fs = require('fs');
var path = require('path');
var jsonStream = require('JSONStream');
var debug = require('debug')('express-cassandra');

var importer = {
  buildTableQueryForDataRow(keyspace, tableInfo, row) {
    row = _.omitBy(row, function (item) {
      return item === null;
    });
    var query = util.format('INSERT INTO "%s"."%s" ("%s") VALUES (?%s)', keyspace, tableInfo.name, _.keys(row).join('","'), _.repeat(',?', _.keys(row).length - 1));
    var params = _.values(row);
    if (tableInfo.isCounterTable) {
      var primaryKeyFields = _.pick(row, tableInfo.primaryKeys);
      var otherKeyFields = _.omit(row, tableInfo.primaryKeys);
      var setQueries = _.map(_.keys(otherKeyFields), function (key) {
        return util.format('"%s"="%s" + ?', key, key);
      });
      var whereQueries = _.map(_.keys(primaryKeyFields), function (key) {
        return util.format('"%s"=?', key);
      });
      query = util.format('UPDATE "%s"."%s" SET %s WHERE %s', keyspace, tableInfo.name, setQueries.join(', '), whereQueries.join(' AND '));
      params = _.values(otherKeyFields).concat(_.values(primaryKeyFields));
    }
    params = _.map(params, function (param) {
      if (_.isPlainObject(param)) {
        if (param.type === 'Buffer') {
          return Buffer.from(param);
        }
        var omittedParams = _.omitBy(param, function (item) {
          return item === null;
        });
        Object.keys(omittedParams).forEach(function (key) {
          if (_.isObject(omittedParams[key]) && omittedParams[key].type === 'Buffer') {
            omittedParams[key] = Buffer.from(omittedParams[key]);
          }
        });
        return omittedParams;
      }
      return param;
    });
    return { query, params };
  },

  processTableImport(systemClient, fixtureDirectory, keyspace, table, batchSize) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      debug('==================================================');
      debug(`Reading metadata for table: ${table}`);
      systemClient.metadata.getTable(keyspace, table).then(function (tableInfo) {
        if (!tableInfo) {
          resolve();
          return;
        }
        var isCounterTable = _.some(tableInfo.columns, function (column) {
          return column.type.code === 5;
        });
        if (isCounterTable) batchSize = 1;
        var primaryKeys = [];
        primaryKeys = primaryKeys.concat(_.map(tableInfo.partitionKeys, function (item) {
          return item.name;
        }));
        primaryKeys = primaryKeys.concat(_.map(tableInfo.clusteringKeys, function (item) {
          return item.name;
        }));
        tableInfo.isCounterTable = isCounterTable;
        tableInfo.primaryKeys = primaryKeys;

        var queryPromises = [];
        var queries = [];
        var processed = 0;

        debug(`Creating read stream from: ${table}.json`);
        var jsonfile = fs.createReadStream(path.join(fixtureDirectory, `${table}.json`), { encoding: 'utf8' });
        var readStream = jsonfile.pipe(jsonStream.parse('*'));
        readStream.on('data', function (row) {
          processed++;

          var query = _this.buildTableQueryForDataRow(keyspace, tableInfo, row);
          if (batchSize > 1) {
            queries.push(query);
            if (queries.length >= batchSize) {
              queryPromises.push(systemClient.batch(queries, { prepare: true }));
              queries = [];
            }
          } else {
            queryPromises.push(systemClient.execute(query.query, query.params, { prepare: true }));
          }

          var processPauseSize = batchSize >= 10 ? batchSize * 10 : 100;
          if (processed % processPauseSize === 0) {
            readStream.pause();
            Promise.all(queryPromises).then(function () {
              queryPromises = [];
              readStream.resume();
            }).catch(function (err) {
              reject(err);
            });
          }

          if (processed % 1000 === 0) {
            debug(`Streaming ${processed} rows to table: ${table}`);
          }
        });
        readStream.on('error', function (err) {
          reject(err);
        });

        var startTime = Date.now();
        readStream.on('end', function () {
          debug(`Streaming ${processed} rows to table: ${table}`);
          if (queries.length > 1) {
            queryPromises.push(systemClient.batch(queries, { prepare: true }));
          } else if (queries.length === 1) {
            queryPromises.push(systemClient.execute(queries[0].query, queries[0].params, { prepare: true }));
          }
          Promise.all(queryPromises).then(function () {
            var timeTaken = (Date.now() - startTime) / 1000;
            var throughput = timeTaken ? processed / timeTaken : 0.00;
            debug(`Done with table, throughput: ${throughput.toFixed(1)} rows/s`);
            resolve();
          }).catch(function (err) {
            reject(err);
          });
        });
      }).catch(function (err) {
        reject(err);
      });
    });
  }
};

module.exports = importer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9pbXBvcnRlci5qcyJdLCJuYW1lcyI6WyJQcm9taXNlIiwicmVxdWlyZSIsIl8iLCJ1dGlsIiwiZnMiLCJwYXRoIiwianNvblN0cmVhbSIsImRlYnVnIiwiaW1wb3J0ZXIiLCJidWlsZFRhYmxlUXVlcnlGb3JEYXRhUm93Iiwia2V5c3BhY2UiLCJ0YWJsZUluZm8iLCJyb3ciLCJvbWl0QnkiLCJpdGVtIiwicXVlcnkiLCJmb3JtYXQiLCJuYW1lIiwia2V5cyIsImpvaW4iLCJyZXBlYXQiLCJsZW5ndGgiLCJwYXJhbXMiLCJ2YWx1ZXMiLCJpc0NvdW50ZXJUYWJsZSIsInByaW1hcnlLZXlGaWVsZHMiLCJwaWNrIiwicHJpbWFyeUtleXMiLCJvdGhlcktleUZpZWxkcyIsIm9taXQiLCJzZXRRdWVyaWVzIiwibWFwIiwia2V5Iiwid2hlcmVRdWVyaWVzIiwiY29uY2F0IiwicGFyYW0iLCJpc1BsYWluT2JqZWN0IiwidHlwZSIsIkJ1ZmZlciIsImZyb20iLCJvbWl0dGVkUGFyYW1zIiwiT2JqZWN0IiwiZm9yRWFjaCIsImlzT2JqZWN0IiwicHJvY2Vzc1RhYmxlSW1wb3J0Iiwic3lzdGVtQ2xpZW50IiwiZml4dHVyZURpcmVjdG9yeSIsInRhYmxlIiwiYmF0Y2hTaXplIiwicmVzb2x2ZSIsInJlamVjdCIsIm1ldGFkYXRhIiwiZ2V0VGFibGUiLCJ0aGVuIiwic29tZSIsImNvbHVtbnMiLCJjb2x1bW4iLCJjb2RlIiwicGFydGl0aW9uS2V5cyIsImNsdXN0ZXJpbmdLZXlzIiwicXVlcnlQcm9taXNlcyIsInF1ZXJpZXMiLCJwcm9jZXNzZWQiLCJqc29uZmlsZSIsImNyZWF0ZVJlYWRTdHJlYW0iLCJlbmNvZGluZyIsInJlYWRTdHJlYW0iLCJwaXBlIiwicGFyc2UiLCJvbiIsInB1c2giLCJiYXRjaCIsInByZXBhcmUiLCJleGVjdXRlIiwicHJvY2Vzc1BhdXNlU2l6ZSIsInBhdXNlIiwiYWxsIiwicmVzdW1lIiwiY2F0Y2giLCJlcnIiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwidGltZVRha2VuIiwidGhyb3VnaHB1dCIsInRvRml4ZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLFVBQVVDLFFBQVEsVUFBUixDQUFoQjtBQUNBLElBQU1DLElBQUlELFFBQVEsUUFBUixDQUFWO0FBQ0EsSUFBTUUsT0FBT0YsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNRyxLQUFLSCxRQUFRLElBQVIsQ0FBWDtBQUNBLElBQU1JLE9BQU9KLFFBQVEsTUFBUixDQUFiO0FBQ0EsSUFBTUssYUFBYUwsUUFBUSxZQUFSLENBQW5CO0FBQ0EsSUFBTU0sUUFBUU4sUUFBUSxPQUFSLEVBQWlCLG1CQUFqQixDQUFkOztBQUVBLElBQU1PLFdBQVc7QUFDZkMsNEJBQTBCQyxRQUExQixFQUFvQ0MsU0FBcEMsRUFBK0NDLEdBQS9DLEVBQW9EO0FBQ2xEQSxVQUFNVixFQUFFVyxNQUFGLENBQVNELEdBQVQsRUFBYyxVQUFDRSxJQUFEO0FBQUEsYUFBV0EsU0FBUyxJQUFwQjtBQUFBLEtBQWQsQ0FBTjtBQUNBLFFBQUlDLFFBQVFaLEtBQUthLE1BQUwsQ0FBWSwyQ0FBWixFQUF5RE4sUUFBekQsRUFBbUVDLFVBQVVNLElBQTdFLEVBQW1GZixFQUFFZ0IsSUFBRixDQUFPTixHQUFQLEVBQVlPLElBQVosQ0FBaUIsS0FBakIsQ0FBbkYsRUFBNEdqQixFQUFFa0IsTUFBRixDQUFTLElBQVQsRUFBZWxCLEVBQUVnQixJQUFGLENBQU9OLEdBQVAsRUFBWVMsTUFBWixHQUFxQixDQUFwQyxDQUE1RyxDQUFaO0FBQ0EsUUFBSUMsU0FBU3BCLEVBQUVxQixNQUFGLENBQVNYLEdBQVQsQ0FBYjtBQUNBLFFBQUlELFVBQVVhLGNBQWQsRUFBOEI7QUFDNUIsVUFBTUMsbUJBQW1CdkIsRUFBRXdCLElBQUYsQ0FBT2QsR0FBUCxFQUFZRCxVQUFVZ0IsV0FBdEIsQ0FBekI7QUFDQSxVQUFNQyxpQkFBaUIxQixFQUFFMkIsSUFBRixDQUFPakIsR0FB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QixDQUF2QixFQUEwQjtBQUMvQnVDLDBCQUFjVSxJQUFkLENBQW1CekIsYUFBYTRCLE9BQWIsQ0FBcUJaLFFBQVEsQ0FBUixFQUFXOUMsS0FBaEMsRUFBdUM4QyxRQUFRLENBQVIsRUFBV3ZDLE1BQWxELEVBQTBELEVBQUVrRCxTQUFTLElBQVgsRUFBMUQsQ0FBbkI7QUFDRDtBQUNEeEUsa0JBQVE0RSxHQUFSLENBQVloQixhQUFaLEVBQ0dQLElBREgsQ0FDUSxZQUFNO0FBQ1YsZ0JBQU04QixZQUFZLENBQUNGLEtBQUtDLEdBQUwsS0FBYUYsU0FBZCxJQUEyQixJQUE3QztBQUNBLGdCQUFNSSxhQUFhRCxZQUFZckIsWUFBWXFCLFNBQXhCLEdBQW9DLElBQXZEO0FBQ0E1RSxrQkFBTyxnQ0FBK0I2RSxXQUFXQyxPQUFYLENBQW1CLENBQW5CLENBQXNCLFNBQTVEO0FBQ0FwQztBQUNELFdBTkgsRUFPRzZCLEtBUEgsQ0FPUyxVQUFDQyxHQUFELEVBQVM7QUFDZDdCLG1CQUFPNkIsR0FBUDtBQUNELFdBVEg7QUFVRCxTQWpCRDtBQWtCRCxPQTNFSCxFQTRFR0QsS0E1RUgsQ0E0RVMsVUFBQ0MsR0FBRCxFQUFTO0FBQ2Q3QixlQUFPNkIsR0FBUDtBQUNELE9BOUVIO0FBK0VELEtBbEZNLENBQVA7QUFtRkQ7QUFuSGMsQ0FBakI7O0FBc0hBTyxPQUFPQyxPQUFQLEdBQWlCL0UsUUFBakIiLCJmaWxlIjoiaW1wb3J0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QganNvblN0cmVhbSA9IHJlcXVpcmUoJ0pTT05TdHJlYW0nKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZXhwcmVzcy1jYXNzYW5kcmEnKTtcblxuY29uc3QgaW1wb3J0ZXIgPSB7XG4gIGJ1aWxkVGFibGVRdWVyeUZvckRhdGFSb3coa2V5c3BhY2UsIHRhYmxlSW5mbywgcm93KSB7XG4gICAgcm93ID0gXy5vbWl0Qnkocm93LCAoaXRlbSkgPT4gKGl0ZW0gPT09IG51bGwpKTtcbiAgICBsZXQgcXVlcnkgPSB1dGlsLmZvcm1hdCgnSU5TRVJUIElOVE8gXCIlc1wiLlwiJXNcIiAoXCIlc1wiKSBWQUxVRVMgKD8lcyknLCBrZXlzcGFjZSwgdGFibGVJbmZvLm5hbWUsIF8ua2V5cyhyb3cpLmpvaW4oJ1wiLFwiJyksIF8ucmVwZWF0KCcsPycsIF8ua2V5cyhyb3cpLmxlbmd0aCAtIDEpKTtcbiAgICBsZXQgcGFyYW1zID0gXy52YWx1ZXMocm93KTtcbiAgICBpZiAodGFibGVJbmZvLmlzQ291bnRlclRhYmxlKSB7XG4gICAgICBjb25zdCBwcmltYXJ5S2V5RmllbGRzID0gXy5waWNrKHJvdywgdGFibGVJbmZvLnByaW1hcnlLZXlzKTtcbiAgICAgIGNvbnN0IG90aGVyS2V5RmllbGRzID0gXy5vbWl0KHJvdywgdGFibGVJbmZvLnByaW1hcnlLZXlzKTtcbiAgICAgIGNvbnN0IHNldFF1ZXJpZXMgPSBfLm1hcChfLmtleXMob3RoZXJLZXlGaWVsZHMpLCAoa2V5KSA9PiB1dGlsLmZvcm1hdCgnXCIlc1wiPVwiJXNcIiArID8nLCBrZXksIGtleSkpO1xuICAgICAgY29uc3Qgd2hlcmVRdWVyaWVzID0gXy5tYXAoXy5rZXlzKHByaW1hcnlLZXlGaWVsZHMpLCAoa2V5KSA9PiB1dGlsLmZvcm1hdCgnXCIlc1wiPT8nLCBrZXkpKTtcbiAgICAgIHF1ZXJ5ID0gdXRpbC5mb3JtYXQoJ1VQREFURSBcIiVzXCIuXCIlc1wiIFNFVCAlcyBXSEVSRSAlcycsIGtleXNwYWNlLCB0YWJsZUluZm8ubmFtZSwgc2V0UXVlcmllcy5qb2luKCcsICcpLCB3aGVyZVF1ZXJpZXMuam9pbignIEFORCAnKSk7XG4gICAgICBwYXJhbXMgPSBfLnZhbHVlcyhvdGhlcktleUZpZWxkcykuY29uY2F0KF8udmFsdWVzKHByaW1hcnlLZXlGaWVsZHMpKTtcbiAgICB9XG4gICAgcGFyYW1zID0gXy5tYXAocGFyYW1zLCAocGFyYW0pID0+IHtcbiAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QocGFyYW0pKSB7XG4gICAgICAgIGlmIChwYXJhbS50eXBlID09PSAnQnVmZmVyJykge1xuICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShwYXJhbSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb21pdHRlZFBhcmFtcyA9IF8ub21pdEJ5KHBhcmFtLCAoaXRlbSkgPT4gKGl0ZW0gPT09IG51bGwpKTtcbiAgICAgICAgT2JqZWN0LmtleXMob21pdHRlZFBhcmFtcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgaWYgKF8uaXNPYmplY3Qob21pdHRlZFBhcmFtc1trZXldKSAmJiBvbWl0dGVkUGFyYW1zW2tleV0udHlwZSA9PT0gJ0J1ZmZlcicpIHtcbiAgICAgICAgICAgIG9taXR0ZWRQYXJhbXNba2V5XSA9IEJ1ZmZlci5mcm9tKG9taXR0ZWRQYXJhbXNba2V5XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG9taXR0ZWRQYXJhbXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgcXVlcnksIHBhcmFtcyB9O1xuICB9LFxuXG4gIHByb2Nlc3NUYWJsZUltcG9ydChzeXN0ZW1DbGllbnQsIGZpeHR1cmVEaXJlY3RvcnksIGtleXNwYWNlLCB0YWJsZSwgYmF0Y2hTaXplKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGRlYnVnKCc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpO1xuICAgICAgZGVidWcoYFJlYWRpbmcgbWV0YWRhdGEgZm9yIHRhYmxlOiAke3RhYmxlfWApO1xuICAgICAgc3lzdGVtQ2xpZW50Lm1ldGFkYXRhLmdldFRhYmxlKGtleXNwYWNlLCB0YWJsZSlcbiAgICAgICAgLnRoZW4oKHRhYmxlSW5mbykgPT4ge1xuICAgICAgICAgIGlmICghdGFibGVJbmZvKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGlzQ291bnRlclRhYmxlID0gXy5zb21lKHRhYmxlSW5mby5jb2x1bW5zLCAoY29sdW1uKSA9PiAoY29sdW1uLnR5cGUuY29kZSA9PT0gNSkpO1xuICAgICAgICAgIGlmIChpc0NvdW50ZXJUYWJsZSkgYmF0Y2hTaXplID0gMTtcbiAgICAgICAgICBsZXQgcHJpbWFyeUtleXMgPSBbXTtcbiAgICAgICAgICBwcmltYXJ5S2V5cyA9IHByaW1hcnlLZXlzLmNvbmNhdChfLm1hcCh0YWJsZUluZm8ucGFydGl0aW9uS2V5cywgKGl0ZW0pID0+IGl0ZW0ubmFtZSkpO1xuICAgICAgICAgIHByaW1hcnlLZXlzID0gcHJpbWFyeUtleXMuY29uY2F0KF8ubWFwKHRhYmxlSW5mby5jbHVzdGVyaW5nS2V5cywgKGl0ZW0pID0+IGl0ZW0ubmFtZSkpO1xuICAgICAgICAgIHRhYmxlSW5mby5pc0NvdW50ZXJUYWJsZSA9IGlzQ291bnRlclRhYmxlO1xuICAgICAgICAgIHRhYmxlSW5mby5wcmltYXJ5S2V5cyA9IHByaW1hcnlLZXlzO1xuXG4gICAgICAgICAgbGV0IHF1ZXJ5UHJvbWlzZXMgPSBbXTtcbiAgICAgICAgICBsZXQgcXVlcmllcyA9IFtdO1xuICAgICAgICAgIGxldCBwcm9jZXNzZWQgPSAwO1xuXG4gICAgICAgICAgZGVidWcoYENyZWF0aW5nIHJlYWQgc3RyZWFtIGZyb206ICR7dGFibGV9Lmpzb25gKTtcbiAgICAgICAgICBjb25zdCBqc29uZmlsZSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aC5qb2luKGZpeHR1cmVEaXJlY3RvcnksIGAke3RhYmxlfS5qc29uYCksIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KTtcbiAgICAgICAgICBjb25zdCByZWFkU3RyZWFtID0ganNvbmZpbGUucGlwZShqc29uU3RyZWFtLnBhcnNlKCcqJykpO1xuICAgICAgICAgIHJlYWRTdHJlYW0ub24oJ2RhdGEnLCAocm93KSA9PiB7XG4gICAgICAgICAgICBwcm9jZXNzZWQrKztcblxuICAgICAgICAgICAgY29uc3QgcXVlcnkgPSB0aGlzLmJ1aWxkVGFibGVRdWVyeUZvckRhdGFSb3coa2V5c3BhY2UsIHRhYmxlSW5mbywgcm93KTtcbiAgICAgICAgICAgIGlmIChiYXRjaFNpemUgPiAxKSB7XG4gICAgICAgICAgICAgIHF1ZXJpZXMucHVzaChxdWVyeSk7XG4gICAgICAgICAgICAgIGlmIChxdWVyaWVzLmxlbmd0aCA+PSBiYXRjaFNpemUpIHtcbiAgICAgICAgICAgICAgICBxdWVyeVByb21pc2VzLnB1c2goc3lzdGVtQ2xpZW50LmJhdGNoKHF1ZXJpZXMsIHsgcHJlcGFyZTogdHJ1ZSB9KSk7XG4gICAgICAgICAgICAgICAgcXVlcmllcyA9IFtdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBxdWVyeVByb21pc2VzLnB1c2goc3lzdGVtQ2xpZW50LmV4ZWN1dGUocXVlcnkucXVlcnksIHF1ZXJ5LnBhcmFtcywgeyBwcmVwYXJlOiB0cnVlIH0pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc1BhdXNlU2l6ZSA9IChiYXRjaFNpemUgPj0gMTApID8gYmF0Y2hTaXplICogMTAgOiAxMDA7XG4gICAgICAgICAgICBpZiAocHJvY2Vzc2VkICUgcHJvY2Vzc1BhdXNlU2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICByZWFkU3RyZWFtLnBhdXNlKCk7XG4gICAgICAgICAgICAgIFByb21pc2UuYWxsKHF1ZXJ5UHJvbWlzZXMpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcXVlcnlQcm9taXNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgcmVhZFN0cmVhbS5yZXN1bWUoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByb2Nlc3NlZCAlIDEwMDAgPT09IDApIHtcbiAgICAgICAgICAgICAgZGVidWcoYFN0cmVhbWluZyAke3Byb2Nlc3NlZH0gcm93cyB0byB0YWJsZTogJHt0YWJsZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZWFkU3RyZWFtLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICByZWFkU3RyZWFtLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICBkZWJ1ZyhgU3RyZWFtaW5nICR7cHJvY2Vzc2VkfSByb3dzIHRvIHRhYmxlOiAke3RhYmxlfWApO1xuICAgICAgICAgICAgaWYgKHF1ZXJpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBxdWVyeVByb21pc2VzLnB1c2goc3lzdGVtQ2xpZW50LmJhdGNoKHF1ZXJpZXMsIHsgcHJlcGFyZTogdHJ1ZSB9KSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHF1ZXJpZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgIHF1ZXJ5UHJvbWlzZXMucHVzaChzeXN0ZW1DbGllbnQuZXhlY3V0ZShxdWVyaWVzWzBdLnF1ZXJ5LCBxdWVyaWVzWzBdLnBhcmFtcywgeyBwcmVwYXJlOiB0cnVlIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFByb21pc2UuYWxsKHF1ZXJ5UHJvbWlzZXMpXG4gICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lVGFrZW4gPSAoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSkgLyAxMDAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRocm91Z2hwdXQgPSB0aW1lVGFrZW4gPyBwcm9jZXNzZWQgLyB0aW1lVGFrZW4gOiAwLjAwO1xuICAgICAgICAgICAgICAgIGRlYnVnKGBEb25lIHdpdGggdGFibGUsIHRocm91Z2hwdXQ6ICR7dGhyb3VnaHB1dC50b0ZpeGVkKDEpfSByb3dzL3NgKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW1wb3J0ZXI7XG4iXX0=