'use strict';

var Promise = require('bluebird');
var util = require('util');
var _ = require('lodash');

var elasticsearch = void 0;
try {
  // eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved
  elasticsearch = require('elasticsearch');
} catch (e) {
  elasticsearch = null;
}

var gremlin = void 0;
try {
  // eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved
  gremlin = require('gremlin');
} catch (e) {
  gremlin = null;
}

var dseDriver = void 0;
try {
  // eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved
  dseDriver = require('dse-driver');
} catch (e) {
  dseDriver = null;
}

var cql = Promise.promisifyAll(dseDriver || require('cassandra-driver'));

var BaseModel = require('./base_model');
var schemer = require('../validators/schema');
var normalizer = require('../utils/normalizer');
var buildError = require('./apollo_error.js');

var KeyspaceBuilder = require('../builders/keyspace');
var UdtBuilder = require('../builders/udt');
var UdfBuilder = require('../builders/udf');
var UdaBuilder = require('../builders/uda');
var ElassandraBuilder = require('../builders/elassandra');
var JanusGraphBuilder = require('../builders/janusgraph');

var DEFAULT_REPLICATION_FACTOR = 1;

var noop = function noop() {};

var Apollo = function f(connection, options) {
  if (!connection) {
    throw buildError('model.validator.invalidconfig', 'Cassandra connection configuration undefined');
  }

  options = options || {};

  if (!options.defaultReplicationStrategy) {
    options.defaultReplicationStrategy = {
      class: 'SimpleStrategy',
      replication_factor: DEFAULT_REPLICATION_FACTOR
    };
  }

  this._options = options;
  this._models = {};
  this._keyspace = connection.keyspace;
  this._connection = connection;
  this._client = null;
  this._esclient = null;
  this._gremlin_client = null;
};

Apollo.prototype = {

  _generate_model(properties) {
    var Model = function f() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      BaseModel.apply(this, Array.prototype.slice.call(args));
    };

    util.inherits(Model, BaseModel);

    Object.keys(BaseModel).forEach(function (key) {
      Model[key] = BaseModel[key];
    });

    Model._set_properties(properties);

    return Model;
  },

  create_es_client() {
    if (!elasticsearch) {
      throw new Error('Configured to use elassandra, but elasticsearch module was not found, try npm install elasticsearch');
    }

    var contactPoints = this._connection.contactPoints;
    var defaultHosts = [];
    contactPoints.forEach(function (host) {
      defaultHosts.push({ host });
    });

    var esClientConfig = _.defaults({}, this._connection.elasticsearch, {
      hosts: defaultHosts,
      sniffOnStart: true
    });
    this._esclient = new elasticsearch.Client(esClientConfig);
    return this._esclient;
  },

  _assert_es_index(callback) {
    var esClient = this.create_es_client();
    var indexName = this._keyspace;

    var elassandraBuilder = new ElassandraBuilder(esClient);
    elassandraBuilder.assert_index(indexName, indexName, callback);
  },

  create_gremlin_client() {
    if (!gremlin) {
      throw new Error('Configured to use janus graph server, but gremlin module was not found, try npm install gremlin');
    }

    var defaultHosts = this._connection.contactPoints;

    var gremlinConfig = _.defaults({}, this._connection.gremlin, {
      host: defaultHosts[0],
      port: 8182,
      storage: {
        backend: 'cassandrathrift',
        hostname: defaultHosts[0],
        port: 9160
      },
      index: {
        search: {
          backend: 'elasticsearch',
          hostname: defaultHosts[0],
          port: 9200
        }
      },
      options: {}
    });
    this._gremlin_client = gremlin.createClient(gremlinConfig.port, gremlinConfig.host, gremlinConfig.options);
    this._gremlin_config = gremlinConfig;
    return this._gremlin_client;
  },

  _assert_gremlin_graph(callback) {
    var gremlinClient = this.create_gremlin_client();
    var gremlinConfig = this._gremlin_config;
    var keyspaceName = this._keyspace;
    var graphName = `${keyspaceName}_graph`;

    var graphBuilder = new JanusGraphBuilder(gremlinClient, gremlinConfig);
    graphBuilder.assert_graph(graphName, callback);
  },

  get_system_client() {
    var connection = _.cloneDeep(this._connection);
    delete connection.keyspace;

    return new cql.Client(connection);
  },

  get_keyspace_name() {
    return this._keyspace;
  },

  _assert_keyspace(callback) {
    var client = this.get_system_client();
    var keyspaceName = this._keyspace;
    var options = this._options;

    var keyspaceBuilder = new KeyspaceBuilder(client);

    keyspaceBuilder.get_keyspace(keyspaceName, function (err, keyspaceObject) {
      if (err) {
        callback(err);
        return;
      }

      if (!keyspaceObject) {
        keyspaceBuilder.create_keyspace(keyspaceName, options.defaultReplicationStrategy, callback);
        return;
      }

      var dbReplication = normalizer.normalize_replication_option(keyspaceObject.replication);
      var ormReplication = normalizer.normalize_replication_option(options.defaultReplicationStrategy);

      if (!_.isEqual(dbReplication, ormReplication)) {
        keyspaceBuilder.alter_keyspace(keyspaceName, options.defaultReplicationStrategy, callback);
        return;
      }

      client.shutdown(function () {
        callback();
      });
    });
  },

  _assert_user_defined_types(callback) {
    var client = this._define_connection;
    var options = this._options;
    var keyspace = this._keyspace;

    if (!options.udts) {
      callback();
      return;
    }

    var udtBuilder = new UdtBuilder(client);

    Promise.mapSeries(Object.keys(options.udts), function (udtKey) {
      return new Promise(function (resolve, reject) {
        var udtCallback = function udtCallback(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve();
        };
        udtBuilder.get_udt(udtKey, keyspace, function (err, udtObject) {
          if (err) {
            udtCallback(err);
            return;
          }

          if (!udtObject) {
            udtBuilder.create_udt(udtKey, options.udts[udtKey], udtCallback);
            return;
          }

          var udtKeys = Object.keys(options.udts[udtKey]);
          var udtValues = _.map(_.values(options.udts[udtKey]), normalizer.normalize_user_defined_type);
          var fieldNames = udtObject.field_names;
          var fieldTypes = _.map(udtObject.field_types, normalizer.normalize_user_defined_type);

          if (_.difference(udtKeys, fieldNames).length === 0 && _.difference(udtValues, fieldTypes).length === 0) {
            udtCallback();
            return;
          }

          throw new Error(util.format('User defined type "%s" already exists but does not match the udt definition. ' + 'Consider altering or droping the type.', udtKey));
        });
      });
    }).then(function () {
      callback();
    }).catch(function (err) {
      callback(err);
    });
  },

  _assert_user_defined_functions(callback) {
    var client = this._define_connection;
    var options = this._options;
    var keyspace = this._keyspace;

    if (!options.udfs) {
      callback();
      return;
    }

    var udfBuilder = new UdfBuilder(client);

    Promise.mapSeries(Object.keys(options.udfs), function (udfKey) {
      return new Promise(function (resolve, reject) {
        var udfCallback = function udfCallback(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve();
        };

        udfBuilder.validate_definition(udfKey, options.udfs[udfKey]);

        udfBuilder.get_udf(udfKey, keyspace, function (err, udfObject) {
          if (err) {
            udfCallback(err);
            return;
          }

          if (!udfObject) {
            udfBuilder.create_udf(udfKey, options.udfs[udfKey], udfCallback);
            return;
          }

          var udfLanguage = options.udfs[udfKey].language;
          var resultLanguage = udfObject.language;

          var udfCode = options.udfs[udfKey].code;
          var resultCode = udfObject.body;

          var udfReturnType = normalizer.normalize_user_defined_type(options.udfs[udfKey].returnType);
          var resultReturnType = normalizer.normalize_user_defined_type(udfObject.return_type);

          var udfInputs = options.udfs[udfKey].inputs ? options.udfs[udfKey].inputs : {};
          var udfInputKeys = Object.keys(udfInputs);
          var udfInputValues = _.map(_.values(udfInputs), normalizer.normalize_user_defined_type);
          var resultArgumentNames = udfObject.argument_names;
          var resultArgumentTypes = _.map(udfObject.argument_types, normalizer.normalize_user_defined_type);

          if (udfLanguage === resultLanguage && udfCode === resultCode && udfReturnType === resultReturnType && _.isEqual(udfInputKeys, resultArgumentNames) && _.isEqual(udfInputValues, resultArgumentTypes)) {
            udfCallback();
            return;
          }

          udfBuilder.create_udf(udfKey, options.udfs[udfKey], udfCallback);
        });
      });
    }).then(function () {
      callback();
    }).catch(function (err) {
      callback(err);
    });
  },

  _assert_user_defined_aggregates(callback) {
    var client = this._define_connection;
    var options = this._options;
    var keyspace = this._keyspace;

    if (!options.udas) {
      callback();
      return;
    }

    var udaBuilder = new UdaBuilder(client);

    Promise.mapSeries(Object.keys(options.udas), function (udaKey) {
      return new Promise(function (resolve, reject) {
        var udaCallback = function udaCallback(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve();
        };

        udaBuilder.validate_definition(udaKey, options.udas[udaKey]);

        if (!options.udas[udaKey].initcond) {
          options.udas[udaKey].initcond = null;
        }

        udaBuilder.get_uda(udaKey, keyspace, function (err, udaObjects) {
          if (err) {
            udaCallback(err);
            return;
          }

          if (!udaObjects) {
            udaBuilder.create_uda(udaKey, options.udas[udaKey], udaCallback);
            return;
          }

          var inputTypes = _.map(options.udas[udaKey].input_types, normalizer.normalize_user_defined_type);
          var sfunc = options.udas[udaKey].sfunc.toLowerCase();
          var stype = normalizer.normalize_user_defined_type(options.udas[udaKey].stype);
          var finalfunc = options.udas[udaKey].finalfunc ? options.udas[udaKey].finalfunc.toLowerCase() : null;
          var initcond = options.udas[udaKey].initcond ? options.udas[udaKey].initcond.replace(/[\s]/g, '') : null;

          for (var i = 0; i < udaObjects.length; i++) {
            var resultArgumentTypes = _.map(udaObjects[i].argument_types, normalizer.normalize_user_defined_type);

            var resultStateFunc = udaObjects[i].state_func;
            var resultStateType = normalizer.normalize_user_defined_type(udaObjects[i].state_type);
            var resultFinalFunc = udaObjects[i].final_func;
            var resultInitcond = udaObjects[i].initcond ? udaObjects[i].initcond.replace(/[\s]/g, '') : null;

            if (sfunc === resultStateFunc && stype === resultStateType && finalfunc === resultFinalFunc && initcond === resultInitcond && _.isEqual(inputTypes, resultArgumentTypes)) {
              udaCallback();
              return;
            }
          }
          udaBuilder.create_uda(udaKey, options.udas[udaKey], udaCallback);
        });
      });
    }).then(function () {
      callback();
    }).catch(function (err) {
      callback(err);
    });
  },

  _set_client(client) {
    var _this = this;

    var defineConnectionOptions = _.cloneDeep(this._connection);

    this._client = client;
    this._define_connection = new cql.Client(defineConnectionOptions);

    // Reset connections on all models
    Object.keys(this._models).forEach(function (i) {
      _this._models[i]._properties.cql = _this._client;
      _this._models[i]._properties.define_connection = _this._define_connection;
    });
  },

  init(callback) {
    var _this2 = this;

    var onUserDefinedAggregates = function onUserDefinedAggregates(err) {
      if (err) {
        callback(err);
        return;
      }

      var managementTasks = [];
      if (_this2._keyspace && _this2._options.manageESIndex) {
        _this2.assertESIndexAsync = Promise.promisify(_this2._assert_es_index);
        managementTasks.push(_this2.assertESIndexAsync());
      }
      if (_this2._keyspace && _this2._options.manageGraphs) {
        _this2.assertGremlinGraphAsync = Promise.promisify(_this2._assert_gremlin_graph);
        managementTasks.push(_this2.assertGremlinGraphAsync());
      }
      Promise.all(managementTasks).then(function () {
        callback(null, _this2);
      }).catch(function (err1) {
        callback(err1);
      });
    };

    var onUserDefinedFunctions = function f(err) {
      if (err) {
        callback(err);
        return;
      }
      try {
        this._assert_user_defined_aggregates(onUserDefinedAggregates.bind(this));
      } catch (e) {
        throw buildError('model.validator.invaliduda', e.message);
      }
    };

    var onUserDefinedTypes = function f(err) {
      if (err) {
        callback(err);
        return;
      }
      try {
        this._assert_user_defined_functions(onUserDefinedFunctions.bind(this));
      } catch (e) {
        throw buildError('model.validator.invalidudf', e.message);
      }
    };

    var onKeyspace = function f(err) {
      if (err) {
        callback(err);
        return;
      }
      this._set_client(new cql.Client(this._connection));
      try {
        this._assert_user_defined_types(onUserDefinedTypes.bind(this));
      } catch (e) {
        throw buildError('model.validator.invalidudt', e.message);
      }
    };

    if (this._keyspace && this._options.createKeyspace !== false) {
      this._assert_keyspace(onKeyspace.bind(this));
    } else {
      onKeyspace.call(this);
    }
  },

  addModel(modelName, modelSchema) {
    if (!modelName || typeof modelName !== 'string') {
      throw buildError('model.validator.invalidschema', 'Model name must be a valid string');
    }

    try {
      schemer.validate_model_schema(modelSchema);
    } catch (e) {
      throw buildError('model.validator.invalidschema', e.message);
    }

    if (modelSchema.options && modelSchema.options.timestamps) {
      var timestampOptions = {
        createdAt: modelSchema.options.timestamps.createdAt || 'createdAt',
        updatedAt: modelSchema.options.timestamps.updatedAt || 'updatedAt'
      };
      modelSchema.options.timestamps = timestampOptions;

      modelSchema.fields[modelSchema.options.timestamps.createdAt] = {
        type: 'timestamp',
        default: {
          $db_function: 'toTimestamp(now())'
        }
      };
      modelSchema.fields[modelSchema.options.timestamps.updatedAt] = {
        type: 'timestamp',
        default: {
          $db_function: 'toTimestamp(now())'
        }
      };
    }

    if (modelSchema.options && modelSchema.options.versions) {
      var versionOptions = {
        key: modelSchema.options.versions.key || '__v'
      };
      modelSchema.options.versions = versionOptions;

      modelSchema.fields[modelSchema.options.versions.key] = {
        type: 'timeuuid',
        default: {
          $db_function: 'now()'
        }
      };
    }

    var baseProperties = {
      name: modelName,
      schema: modelSchema,
      keyspace: this._keyspace,
      define_connection: this._define_connection,
      cql: this._client,
      esclient: this._esclient,
      gremlin_client: this._gremlin_client,
      get_constructor: this.getModel.bind(this, modelName),
      init: this.init.bind(this),
      dropTableOnSchemaChange: this._options.dropTableOnSchemaChange,
      createTable: this._options.createTable,
      migration: this._options.migration,
      disableTTYConfirmation: this._options.disableTTYConfirmation
    };

    this._models[modelName] = this._generate_model(baseProperties);
    return this._models[modelName];
  },

  getModel(modelName) {
    return this._models[modelName] || null;
  },

  close(callback) {
    callback = callback || noop;

    if (this.orm._esclient) {
      this.orm._esclient.close();
    }

    if (this.orm._gremlin_client && this.orm._gremlin_client.connection && this.orm._gremlin_client.connection.ws) {
      this.orm._gremlin_client.connection.ws.close();
    }

    var clientsToShutdown = [];
    if (this.orm._client) {
      clientsToShutdown.push(this.orm._client.shutdown());
    }
    if (this.orm._define_connection) {
      clientsToShutdown.push(this.orm._define_connection.shutdown());
    }

    Promise.all(clientsToShutdown).then(function () {
      callback();
    }).catch(function (err) {
      callback(err);
    });
  }
};

module.exports = Apollo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,