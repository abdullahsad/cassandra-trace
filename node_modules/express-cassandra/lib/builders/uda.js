'use strict';

var util = require('util');
var _ = require('lodash');

var debug = require('debug')('express-cassandra');

var UdaBuilder = function f(client) {
  this._client = client;
};

UdaBuilder.prototype = {
  validate_definition(aggregateName, aggregateDefinition) {
    if (!aggregateDefinition.input_types) {
      throw new Error(util.format('No input_types defined for user defined function: %s', aggregateName));
    }
    if (!_.isArray(aggregateDefinition.input_types)) {
      throw new Error(util.format('input_types must be an array for user defined function: %s', aggregateName));
    }
    if (aggregateDefinition.input_types.length < 1) {
      throw new Error(util.format('input_types array cannot be blank for user defined function: %s', aggregateName));
    }
    if (!aggregateDefinition.sfunc) {
      throw new Error(util.format('No sfunc defined for user defined aggregate: %s', aggregateName));
    }
    if (!aggregateDefinition.stype) {
      throw new Error(util.format('No stype defined for user defined aggregate: %s', aggregateName));
    }
  },

  create_uda(aggregateName, aggregateDefinition, callback) {
    var query = util.format('CREATE OR REPLACE AGGREGATE %s (%s) SFUNC %s STYPE %s', aggregateName, aggregateDefinition.input_types.toString(), aggregateDefinition.sfunc, aggregateDefinition.stype);
    if (aggregateDefinition.finalfunc) query += util.format(' FINALFUNC %s', aggregateDefinition.finalfunc);
    query += util.format(' INITCOND %s;', aggregateDefinition.initcond);

    debug('executing query: %s', query);
    this._client.execute(query, function (err) {
      callback(err);
    });
  },

  get_uda(aggregateName, keyspaceName, callback) {
    var query = util.format("SELECT * FROM system_schema.aggregates WHERE keyspace_name = '%s' AND aggregate_name = '%s';", keyspaceName, aggregateName.toLowerCase());
    debug('executing query: %s', query);
    this._client.execute(query, function (err, result) {
      if (err) {
        callback(err);
        return;
      }

      if (result.rows && result.rows.length > 0) {
        callback(null, result.rows);
        return;
      }

      callback();
    });
  }
};

module.exports = UdaBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy91ZGEuanMiXSwibmFtZXMiOlsidXRpbCIsInJlcXVpcmUiLCJfIiwiZGVidWciLCJVZGFCdWlsZGVyIiwiZiIsImNsaWVudCIsIl9jbGllbnQiLCJwcm90b3R5cGUiLCJ2YWxpZGF0ZV9kZWZpbml0aW9uIiwiYWdncmVnYXRlTmFtZSIsImFnZ3JlZ2F0ZURlZmluaXRpb24iLCJpbnB1dF90eXBlcyIsIkVycm9yIiwiZm9ybWF0IiwiaXNBcnJheSIsImxlbmd0aCIsInNmdW5jIiwic3R5cGUiLCJjcmVhdGVfdWRhIiwiY2FsbGJhY2siLCJxdWVyeSIsInRvU3RyaW5nIiwiZmluYWxmdW5jIiwiaW5pdGNvbmQiLCJleGVjdXRlIiwiZXJyIiwiZ2V0X3VkYSIsImtleXNwYWNlTmFtZSIsInRvTG93ZXJDYXNlIiwicmVzdWx0Iiwicm93cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNQyxJQUFJRCxRQUFRLFFBQVIsQ0FBVjs7QUFFQSxJQUFNRSxRQUFRRixRQUFRLE9BQVIsRUFBaUIsbUJBQWpCLENBQWQ7O0FBRUEsSUFBTUcsYUFBYSxTQUFTQyxDQUFULENBQVdDLE1BQVgsRUFBbUI7QUFDcEMsT0FBS0MsT0FBTCxHQUFlRCxNQUFmO0FBQ0QsQ0FGRDs7QUFJQUYsV0FBV0ksU0FBWCxHQUF1QjtBQUNyQkMsc0JBQW9CQyxhQUFwQixFQUFtQ0MsbUJBQW5DLEVBQXdEO0FBQ3RELFFBQUksQ0FBQ0Esb0JBQW9CQyxXQUF6QixFQUFzQztBQUNwQyxZQUFPLElBQUlDLEtBQUosQ0FBVWIsS0FBS2MsTUFBTCxDQUFZLHNEQUFaLEVBQW9FSixhQUFwRSxDQUFWLENBQVA7QUFDRDtBQUNELFFBQUksQ0FBQ1IsRUFBRWEsT0FBRixDQUFVSixvQkFBb0JDLFdBQTlCLENBQUwsRUFBaUQ7QUFDL0MsWUFBTyxJQUFJQyxLQUFKLENBQVViLEtBQUtjLE1BQUwsQ0FBWSw0REFBWixFQUEwRUosYUFBMUUsQ0FBVixDQUFQO0FBQ0Q7QUFDRCxRQUFJQyxvQkFBb0JDLFdBQXBCLENBQWdDSSxNQUFoQyxHQUF5QyxDQUE3QyxFQUFnRDtBQUM5QyxZQUFPLElBQUlILEtBQUosQ0FBVWIsS0FBS2MsTUFBTCxDQUFZLGlFQUFaLEVBQStFSixhQUEvRSxDQUFWLENBQVA7QUFDRDtBQUNELFFBQUksQ0FBQ0Msb0JBQW9CTSxLQUF6QixFQUFnQztBQUM5QixZQUFPLElBQUlKLEtBQUosQ0FBVWIsS0FBS2MsTUFBTCxDQUFZLGlEQUFaLEVBQStESixhQUEvRCxDQUFWLENBQVA7QUFDRDtBQUNELFFBQUksQ0FBQ0Msb0JBQW9CTyxLQUF6QixFQUFnQztBQUM5QixZQUFPLElBQUlMLEtBQUosQ0FBVWIsS0FBS2MsTUFBTCxDQUFZLGlEQUFaLEVBQStESixhQUEvRCxDQUFWLENBQVA7QUFDRDtBQUNGLEdBakJvQjs7QUFtQnJCUyxhQUFXVCxhQUFYLEVBQTBCQyxtQkFBMUIsRUFBK0NTLFFBQS9DLEVBQXlEO0FBQ3ZELFFBQUlDLFFBQVFyQixLQUFLYyxNQUFMLENBQ1YsdURBRFUsRUFFVkosYUFGVSxFQUdWQyxvQkFBb0JDLFdBQXBCLENBQWdDVSxRQUFoQyxFQUhVLEVBSVZYLG9CQUFvQk0sS0FKVixFQUtWTixvQkFBb0JPLEtBTFYsQ0FBWjtBQU9BLFFBQUlQLG9CQUFvQlksU0FBeEIsRUFBbUNGLFNBQVNyQixLQUFLYyxNQUFMLENBQVksZUFBWixFQUE2Qkgsb0JBQW9CWSxTQUFqRCxDQUFUO0FBQ25DRixhQUFTckIsS0FBS2MsTUFBTCxDQUFZLGVBQVosRUFBNkJILG9CQUFvQmEsUUFBakQsQ0FBVDs7QUFFQXJCLFVBQU0scUJBQU4sRUFBNkJrQixLQUE3QjtBQUNBLFNBQUtkLE9BQUwsQ0FBYWtCLE9BQWIsQ0FBcUJKLEtBQXJCLEVBQTRCLFVBQUNLLEdBQUQsRUFBUztBQUNuQ04sZUFBU00sR0FBVDtBQUNELEtBRkQ7QUFHRCxHQWxDb0I7O0FBb0NyQkMsVUFBUWpCLGFBQVIsRUFBdUJrQixZQUF2QixFQUFxQ1IsUUFBckMsRUFBK0M7QUFDN0MsUUFBTUMsUUFBUXJCLEtBQUtjLE1BQUwsQ0FDWiw4RkFEWSxFQUVaYyxZQUZZLEVBR1psQixjQUFjbUIsV0FBZCxFQUhZLENBQWQ7QUFLQTFCLFVBQU0scUJBQU4sRUFBNkJrQixLQUE3QjtBQUNBLFNBQUtkLE9BQUwsQ0FBYWtCLE9BQWIsQ0FBcUJKLEtBQXJCLEVBQTRCLFVBQUNLLEdBQUQsRUFBTUksTUFBTixFQUFpQjtBQUMzQyxVQUFJSixHQUFKLEVBQVM7QUFDUE4saUJBQVNNLEdBQVQ7QUFDQTtBQUNEOztBQUVELFVBQUlJLE9BQU9DLElBQVAsSUFBZUQsT0FBT0MsSUFBUCxDQUFZZixNQUFaLEdBQXFCLENBQXhDLEVBQTJDO0FBQ3pDSSxpQkFBUyxJQUFULEVBQWVVLE9BQU9DLElBQXRCO0FBQ0E7QUFDRDs7QUFFRFg7QUFDRCxLQVpEO0FBYUQ7QUF4RG9CLENBQXZCOztBQTJEQVksT0FBT0MsT0FBUCxHQUFpQjdCLFVBQWpCIiwiZmlsZSI6InVkYS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZXhwcmVzcy1jYXNzYW5kcmEnKTtcblxuY29uc3QgVWRhQnVpbGRlciA9IGZ1bmN0aW9uIGYoY2xpZW50KSB7XG4gIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbn07XG5cblVkYUJ1aWxkZXIucHJvdG90eXBlID0ge1xuICB2YWxpZGF0ZV9kZWZpbml0aW9uKGFnZ3JlZ2F0ZU5hbWUsIGFnZ3JlZ2F0ZURlZmluaXRpb24pIHtcbiAgICBpZiAoIWFnZ3JlZ2F0ZURlZmluaXRpb24uaW5wdXRfdHlwZXMpIHtcbiAgICAgIHRocm93IChuZXcgRXJyb3IodXRpbC5mb3JtYXQoJ05vIGlucHV0X3R5cGVzIGRlZmluZWQgZm9yIHVzZXIgZGVmaW5lZCBmdW5jdGlvbjogJXMnLCBhZ2dyZWdhdGVOYW1lKSkpO1xuICAgIH1cbiAgICBpZiAoIV8uaXNBcnJheShhZ2dyZWdhdGVEZWZpbml0aW9uLmlucHV0X3R5cGVzKSkge1xuICAgICAgdGhyb3cgKG5ldyBFcnJvcih1dGlsLmZvcm1hdCgnaW5wdXRfdHlwZXMgbXVzdCBiZSBhbiBhcnJheSBmb3IgdXNlciBkZWZpbmVkIGZ1bmN0aW9uOiAlcycsIGFnZ3JlZ2F0ZU5hbWUpKSk7XG4gICAgfVxuICAgIGlmIChhZ2dyZWdhdGVEZWZpbml0aW9uLmlucHV0X3R5cGVzLmxlbmd0aCA8IDEpIHtcbiAgICAgIHRocm93IChuZXcgRXJyb3IodXRpbC5mb3JtYXQoJ2lucHV0X3R5cGVzIGFycmF5IGNhbm5vdCBiZSBibGFuayBmb3IgdXNlciBkZWZpbmVkIGZ1bmN0aW9uOiAlcycsIGFnZ3JlZ2F0ZU5hbWUpKSk7XG4gICAgfVxuICAgIGlmICghYWdncmVnYXRlRGVmaW5pdGlvbi5zZnVuYykge1xuICAgICAgdGhyb3cgKG5ldyBFcnJvcih1dGlsLmZvcm1hdCgnTm8gc2Z1bmMgZGVmaW5lZCBmb3IgdXNlciBkZWZpbmVkIGFnZ3JlZ2F0ZTogJXMnLCBhZ2dyZWdhdGVOYW1lKSkpO1xuICAgIH1cbiAgICBpZiAoIWFnZ3JlZ2F0ZURlZmluaXRpb24uc3R5cGUpIHtcbiAgICAgIHRocm93IChuZXcgRXJyb3IodXRpbC5mb3JtYXQoJ05vIHN0eXBlIGRlZmluZWQgZm9yIHVzZXIgZGVmaW5lZCBhZ2dyZWdhdGU6ICVzJywgYWdncmVnYXRlTmFtZSkpKTtcbiAgICB9XG4gIH0sXG5cbiAgY3JlYXRlX3VkYShhZ2dyZWdhdGVOYW1lLCBhZ2dyZWdhdGVEZWZpbml0aW9uLCBjYWxsYmFjaykge1xuICAgIGxldCBxdWVyeSA9IHV0aWwuZm9ybWF0KFxuICAgICAgJ0NSRUFURSBPUiBSRVBMQUNFIEFHR1JFR0FURSAlcyAoJXMpIFNGVU5DICVzIFNUWVBFICVzJyxcbiAgICAgIGFnZ3JlZ2F0ZU5hbWUsXG4gICAgICBhZ2dyZWdhdGVEZWZpbml0aW9uLmlucHV0X3R5cGVzLnRvU3RyaW5nKCksXG4gICAgICBhZ2dyZWdhdGVEZWZpbml0aW9uLnNmdW5jLFxuICAgICAgYWdncmVnYXRlRGVmaW5pdGlvbi5zdHlwZSxcbiAgICApO1xuICAgIGlmIChhZ2dyZWdhdGVEZWZpbml0aW9uLmZpbmFsZnVuYykgcXVlcnkgKz0gdXRpbC5mb3JtYXQoJyBGSU5BTEZVTkMgJXMnLCBhZ2dyZWdhdGVEZWZpbml0aW9uLmZpbmFsZnVuYyk7XG4gICAgcXVlcnkgKz0gdXRpbC5mb3JtYXQoJyBJTklUQ09ORCAlczsnLCBhZ2dyZWdhdGVEZWZpbml0aW9uLmluaXRjb25kKTtcblxuICAgIGRlYnVnKCdleGVjdXRpbmcgcXVlcnk6ICVzJywgcXVlcnkpO1xuICAgIHRoaXMuX2NsaWVudC5leGVjdXRlKHF1ZXJ5LCAoZXJyKSA9PiB7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgIH0pO1xuICB9LFxuXG4gIGdldF91ZGEoYWdncmVnYXRlTmFtZSwga2V5c3BhY2VOYW1lLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHF1ZXJ5ID0gdXRpbC5mb3JtYXQoXG4gICAgICBcIlNFTEVDVCAqIEZST00gc3lzdGVtX3NjaGVtYS5hZ2dyZWdhdGVzIFdIRVJFIGtleXNwYWNlX25hbWUgPSAnJXMnIEFORCBhZ2dyZWdhdGVfbmFtZSA9ICclcyc7XCIsXG4gICAgICBrZXlzcGFjZU5hbWUsXG4gICAgICBhZ2dyZWdhdGVOYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgKTtcbiAgICBkZWJ1ZygnZXhlY3V0aW5nIHF1ZXJ5OiAlcycsIHF1ZXJ5KTtcbiAgICB0aGlzLl9jbGllbnQuZXhlY3V0ZShxdWVyeSwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdC5yb3dzICYmIHJlc3VsdC5yb3dzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0LnJvd3MpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVkYUJ1aWxkZXI7XG4iXX0=