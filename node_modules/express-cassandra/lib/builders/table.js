'use strict';

var _ = require('lodash');
var async = require('async');
var util = require('util');
var objectHash = require('object-hash');
var readlineSync = require('readline-sync');
var deepDiff = require('deep-diff').diff;

var buildError = require('../orm/apollo_error.js');
var schemer = require('../validators/schema');
var parser = require('../utils/parser');
var normalizer = require('../utils/normalizer');

var ElassandraBuilder = require('./elassandra');

var TableBuilder = function f(driver, properties) {
  this._driver = driver;
  this._properties = properties;
  if (this._properties.esclient) {
    this._es_builder = new ElassandraBuilder(this._properties.esclient);
  }
};

TableBuilder.prototype = {
  _confirm_migration(message) {
    var permission = 'y';
    if (message && !this._properties.disableTTYConfirmation) {
      permission = readlineSync.question(util.format('Migration: %s (y/n): ', message));
    }
    return permission.toLowerCase();
  },
  get_table(callback) {
    var properties = this._properties;
    var keyspaceName = properties.keyspace;
    var tableName = properties.table_name;
    var dbSchema = { fields: {}, typeMaps: {}, staticMaps: {} };
    var query = 'SELECT * FROM system_schema.columns WHERE table_name = ? AND keyspace_name = ?;';

    this._driver.execute_query(query, [tableName, keyspaceName], function (err, resultColumns) {
      if (err) {
        callback(buildError('model.tablecreation.dbschemaquery', err));
        return;
      }

      if (!resultColumns.rows || resultColumns.rows.length === 0) {
        callback();
        return;
      }

      for (var r = 0; r < resultColumns.rows.length; r++) {
        var row = resultColumns.rows[r];

        dbSchema.fields[row.column_name] = parser.extract_type(row.type);

        var typeMapDef = parser.extract_typeDef(row.type);
        if (typeMapDef.length > 0) {
          dbSchema.typeMaps[row.column_name] = typeMapDef;
        }

        if (row.kind === 'partition_key') {
          if (!dbSchema.key) dbSchema.key = [[]];
          dbSchema.key[0][row.position] = row.column_name;
        } else if (row.kind === 'clustering') {
          if (!dbSchema.key) dbSchema.key = [[]];
          if (!dbSchema.clustering_order) dbSchema.clustering_order = {};

          dbSchema.key[row.position + 1] = row.column_name;
          if (row.clustering_order && row.clustering_order.toLowerCase() === 'desc') {
            dbSchema.clustering_order[row.column_name] = 'DESC';
          } else {
            dbSchema.clustering_order[row.column_name] = 'ASC';
          }
        } else if (row.kind === 'static') {
          dbSchema.staticMaps[row.column_name] = true;
        }
      }

      callback(null, dbSchema);
    });
  },

  get_table_schema(callback) {
    var _this = this;

    this.get_table(function (err, dbSchema) {
      if (err) {
        callback(err);
        return;
      }
      if (!dbSchema) {
        callback();
        return;
      }
      _this.get_indexes(function (err1, indexSchema) {
        if (err1) {
          callback(err1);
          return;
        }
        _this.get_mviews(function (err2, viewSchema) {
          if (err2) {
            callback(err2);
            return;
          }
          Object.assign(dbSchema, indexSchema, viewSchema);
          callback(null, dbSchema);
        });
      });
    });
  },

  create_table(schema, callback) {
    var properties = this._properties;
    var tableName = properties.table_name;
    var rows = [];
    var fieldType = void 0;
    Object.keys(schema.fields).forEach(function (k) {
      if (schema.fields[k].virtual) {
        return;
      }
      var segment = '';
      fieldType = schemer.get_field_type(schema, k);
      if (schema.fields[k].typeDef) {
        segment = util.format('"%s" %s%s', k, fieldType, schema.fields[k].typeDef);
      } else {
        segment = util.format('"%s" %s', k, fieldType);
      }

      if (schema.fields[k].static) {
        segment += ' STATIC';
      }

      rows.push(segment);
    });

    var clauses = parser.get_primary_key_clauses(schema);

    var query = util.format('CREATE TABLE IF NOT EXISTS "%s" (%s , PRIMARY KEY((%s)%s))%s;', tableName, rows.join(' , '), clauses.partitionKeyClause, clauses.clusteringKeyClause, clauses.clusteringOrderClause);

    this._driver.execute_definition_query(query, function (err, result) {
      if (err) {
        callback(buildError('model.tablecreation.dbcreate', err));
        return;
      }
      callback(null, result);
    });
  },

  alter_table(operation, fieldname, type, callback) {
    var properties = this._properties;
    var tableName = properties.table_name;
    if (operation === 'ALTER') type = util.format('TYPE %s', type);else if (operation === 'DROP') type = '';

    var query = util.format('ALTER TABLE "%s" %s "%s" %s;', tableName, operation, fieldname, type);
    this._driver.execute_definition_query(query, callback);
  },

  _drop_table(tableName, callback) {
    var query = util.format('DROP TABLE IF EXISTS "%s";', tableName);
    this._driver.execute_definition_query(query, function (err) {
      if (err) {
        callback(buildError('model.tablecreation.dbdrop', err));
        return;
      }
      callback();
    });
  },

  drop_table(materializedViews, callback) {
    var _this2 = this;

    var properties = this._properties;
    var tableName = properties.table_name;
    var message = util.format('Schema for table "%s" has changed in a way where alter migration is not possible, all data in the table will be lost, are you sure you want to drop the table?', tableName);
    var permission = this._confirm_migration(message);
    if (permission !== 'y') {
      callback(buildError('model.tablecreation.schemamismatch', tableName, 'migration suspended, please apply the change manually'));
      return;
    }
    if (!materializedViews) {
      this._drop_table(tableName, callback);
      return;
    }

    var mviews = Object.keys(materializedViews);
    this.drop_mviews(mviews, function (err) {
      if (err) {
        callback(err);
        return;
      }

      _this2._drop_table(tableName, callback);
    });
  },

  drop_recreate_table(modelSchema, materializedViews, callback) {
    var _this3 = this;

    if (this._es_builder) {
      var indexName = `${this._properties.keyspace}_${this._properties.table_name}`;
      this._es_builder.delete_index(indexName, function () {
        _this3.drop_table(materializedViews, function (err1) {
          if (err1) {
            callback(err1);
            return;
          }
          _this3.create_table(modelSchema, callback);
        });
      });
      return;
    }
    this.drop_table(materializedViews, function (err1) {
      if (err1) {
        callback(err1);
        return;
      }
      _this3.create_table(modelSchema, callback);
    });
  },

  get_indexes(callback) {
    var properties = this._properties;
    var keyspaceName = properties.keyspace;
    var tableName = properties.table_name;
    var dbSchema = {};
    var query = 'SELECT * FROM system_schema.indexes WHERE table_name = ? AND keyspace_name = ?;';

    this._driver.execute_query(query, [tableName, keyspaceName], function (err, resultIndexes) {
      if (err) {
        callback(buildError('model.tablecreation.dbschemaquery', err));
        return;
      }

      for (var r = 0; r < resultIndexes.rows.length; r++) {
        var row = resultIndexes.rows[r];

        if (row.index_name && row.options.target) {
          var indexOptions = row.options;
          var target = indexOptions.target;
          target = target.replace(/["\s]/g, '');
          delete indexOptions.target;

          // keeping track of index names to drop index when needed
          if (!dbSchema.index_names) dbSchema.index_names = {};

          if (row.kind === 'CUSTOM') {
            var using = indexOptions.class_name;
            delete indexOptions.class_name;

            if (!dbSchema.custom_indexes) dbSchema.custom_indexes = [];
            var customIndexObject = {
              on: target,
              using,
              options: indexOptions
            };
            dbSchema.custom_indexes.push(customIndexObject);
            dbSchema.index_names[objectHash(customIndexObject)] = row.index_name;
          } else {
            if (!dbSchema.indexes) dbSchema.indexes = [];
            dbSchema.indexes.push(target);
            dbSchema.index_names[target] = row.index_name;
          }
        }
      }

      callback(null, dbSchema);
    });
  },

  _create_index_query(tableName, indexName) {
    var query = void 0;
    var indexExpression = indexName.replace(/["\s]/g, '').split(/[()]/g);
    if (indexExpression.length > 1) {
      indexExpression[0] = indexExpression[0].toLowerCase();
      query = util.format('CREATE INDEX IF NOT EXISTS ON "%s" (%s("%s"));', tableName, indexExpression[0], indexExpression[1]);
    } else {
      query = util.format('CREATE INDEX IF NOT EXISTS ON "%s" ("%s");', tableName, indexExpression[0]);
    }
    return query;
  },

  create_indexes(indexes, callback) {
    var _this4 = this;

    var properties = this._properties;
    var tableName = properties.table_name;
    async.eachSeries(indexes, function (idx, next) {
      var query = _this4._create_index_query(tableName, idx);
      _this4._driver.execute_definition_query(query, function (err, result) {
        if (err) next(buildError('model.tablecreation.dbindexcreate', err));else next(null, result);
      });
    }, callback);
  },

  _create_custom_index_query(tableName, customIndex) {
    var query = util.format('CREATE CUSTOM INDEX IF NOT EXISTS ON "%s" ("%s") USING \'%s\'', tableName, customIndex.on, customIndex.using);

    if (Object.keys(customIndex.options).length > 0) {
      query += ' WITH OPTIONS = {';
      Object.keys(customIndex.options).forEach(function (key) {
        query += util.format("'%s': '%s', ", key, customIndex.options[key]);
      });
      query = query.slice(0, -2);
      query += '}';
    }

    query += ';';

    return query;
  },

  create_custom_indexes(customIndexes, callback) {
    var _this5 = this;

    var properties = this._properties;
    var tableName = properties.table_name;
    async.eachSeries(customIndexes, function (idx, next) {
      var query = _this5._create_custom_index_query(tableName, idx);
      _this5._driver.execute_definition_query(query, function (err, result) {
        if (err) next(buildError('model.tablecreation.dbindexcreate', err));else next(null, result);
      });
    }, callback);
  },

  drop_indexes(indexes, callback) {
    var _this6 = this;

    async.each(indexes, function (idx, next) {
      var query = util.format('DROP INDEX IF EXISTS "%s";', idx);
      _this6._driver.execute_definition_query(query, next);
    }, function (err) {
      if (err) callback(buildError('model.tablecreation.dbindexdrop', err));else callback();
    });
  },

  get_mviews(callback) {
    var _this7 = this;

    var properties = this._properties;
    var keyspaceName = properties.keyspace;
    var tableName = properties.table_name;
    var dbSchema = {};
    var query = 'SELECT view_name,base_table_name,where_clause FROM system_schema.views WHERE keyspace_name=?;';

    this._driver.execute_query(query, [keyspaceName], function (err, resultViews) {
      if (err) {
        callback(buildError('model.tablecreation.dbschemaquery', err));
        return;
      }

      for (var r = 0; r < resultViews.rows.length; r++) {
        var row = resultViews.rows[r];

        if (row.view_name && row.base_table_name === tableName) {
          if (!dbSchema.materialized_views) dbSchema.materialized_views = {};
          dbSchema.materialized_views[row.view_name] = {
            where_clause: row.where_clause
          };
        }
      }

      if (!dbSchema.materialized_views) {
        callback(null, dbSchema);
        return;
      }

      query = 'SELECT * FROM system_schema.columns WHERE keyspace_name=? and table_name IN ?;';

      var viewNames = Object.keys(dbSchema.materialized_views);
      _this7._driver.execute_query(query, [keyspaceName, viewNames], function (err1, resultMatViews) {
        if (err1) {
          callback(buildError('model.tablecreation.dbschemaquery', err1));
          return;
        }

        for (var _r = 0; _r < resultMatViews.rows.length; _r++) {
          var _row = resultMatViews.rows[_r];

          if (!dbSchema.materialized_views[_row.table_name].select) {
            dbSchema.materialized_views[_row.table_name].select = [];
          }

          dbSchema.materialized_views[_row.table_name].select.push(_row.column_name);

          if (_row.kind === 'partition_key') {
            if (!dbSchema.materialized_views[_row.table_name].key) {
              dbSchema.materialized_views[_row.table_name].key = [[]];
            }

            dbSchema.materialized_views[_row.table_name].key[0][_row.position] = _row.column_name;
          } else if (_row.kind === 'clustering') {
            if (!dbSchema.materialized_views[_row.table_name].key) {
              dbSchema.materialized_views[_row.table_name].key = [[]];
            }
            if (!dbSchema.materialized_views[_row.table_name].clustering_order) {
              dbSchema.materialized_views[_row.table_name].clustering_order = {};
            }

            dbSchema.materialized_views[_row.table_name].key[_row.position + 1] = _row.column_name;
            if (_row.clustering_order && _row.clustering_order.toLowerCase() === 'desc') {
              dbSchema.materialized_views[_row.table_name].clustering_order[_row.column_name] = 'DESC';
            } else {
              dbSchema.materialized_views[_row.table_name].clustering_order[_row.column_name] = 'ASC';
            }
          }
        }

        callback(null, dbSchema);
      });
    });
  },

  _create_materialized_view_query(tableName, viewName, viewSchema) {
    var rows = [];

    for (var k = 0; k < viewSchema.select.length; k++) {
      if (viewSchema.select[k] === '*') rows.push(util.format('%s', viewSchema.select[k]));else rows.push(util.format('"%s"', viewSchema.select[k]));
    }

    var whereClause = viewSchema.where_clause || parser.get_mview_where_clause(this._properties.schema, viewSchema);
    var clauses = parser.get_primary_key_clauses(viewSchema);

    var query = util.format('CREATE MATERIALIZED VIEW IF NOT EXISTS "%s" AS SELECT %s FROM "%s" WHERE %s PRIMARY KEY((%s)%s)%s;', viewName, rows.join(' , '), tableName, whereClause, clauses.partitionKeyClause, clauses.clusteringKeyClause, clauses.clusteringOrderClause);

    return query;
  },

  create_mviews(materializedViews, callback) {
    var _this8 = this;

    var properties = this._properties;
    var tableName = properties.table_name;
    async.eachSeries(Object.keys(materializedViews), function (viewName, next) {
      var query = _this8._create_materialized_view_query(tableName, viewName, materializedViews[viewName]);
      _this8._driver.execute_definition_query(query, function (err, result) {
        if (err) next(buildError('model.tablecreation.matviewcreate', err));else next(null, result);
      });
    }, callback);
  },

  drop_mviews(mviews, callback) {
    var _this9 = this;

    async.each(mviews, function (view, next) {
      var query = util.format('DROP MATERIALIZED VIEW IF EXISTS "%s";', view);
      _this9._driver.execute_definition_query(query, next);
    }, function (err) {
      if (err) callback(buildError('model.tablecreation.matviewdrop', err));else callback();
    });
  },

  _apply_alter_operations(alterOperations, dbSchema, normalizedModelSchema, normalizedDBSchema, callback) {
    var _this10 = this;

    // it should create/drop indexes/custom_indexes/materialized_views that are added/removed in model schema
    // remove common indexes/custom_indexes/materialized_views from normalizedModelSchema and normalizedDBSchema
    // then drop all remaining indexes/custom_indexes/materialized_views from normalizedDBSchema
    // and add all remaining indexes/custom_indexes/materialized_views from normalizedModelSchema
    var properties = this._properties;
    var tableName = properties.table_name;
    var addedIndexes = _.difference(normalizedModelSchema.indexes, normalizedDBSchema.indexes);
    var removedIndexes = _.difference(normalizedDBSchema.indexes, normalizedModelSchema.indexes);
    var removedIndexNames = [];
    removedIndexes.forEach(function (removedIndex) {
      removedIndexNames.push(dbSchema.index_names[removedIndex]);
    });

    var addedCustomIndexes = _.filter(normalizedModelSchema.custom_indexes, function (obj) {
      return !_.find(normalizedDBSchema.custom_indexes, obj);
    });
    var removedCustomIndexes = _.filter(normalizedDBSchema.custom_indexes, function (obj) {
      return !_.find(normalizedModelSchema.custom_indexes, obj);
    });
    removedCustomIndexes.forEach(function (removedIndex) {
      removedIndexNames.push(dbSchema.index_names[objectHash(removedIndex)]);
    });

    var addedMaterializedViewsNames = _.filter(Object.keys(normalizedModelSchema.materialized_views), function (viewName) {
      return !_.isEqual(normalizedDBSchema.materialized_views[viewName], normalizedModelSchema.materialized_views[viewName]);
    });

    var removedMaterializedViewNames = _.filter(Object.keys(normalizedDBSchema.materialized_views), function (viewName) {
      return !_.isEqual(normalizedDBSchema.materialized_views[viewName], normalizedModelSchema.materialized_views[viewName]);
    });

    var addedMaterializedViews = {};
    addedMaterializedViewsNames.forEach(function (viewName) {
      addedMaterializedViews[viewName] = normalizedModelSchema.materialized_views[viewName];
    });

    // remove altered materialized views
    if (removedMaterializedViewNames.length > 0) {
      var message = util.format('Schema for table "%s" has removed materialized_views: %j, are you sure you want to drop them?', tableName, removedMaterializedViewNames);
      var permission = this._confirm_migration(message);
      if (permission !== 'y') {
        callback(buildError('model.tablecreation.schemamismatch', tableName, 'migration suspended, please apply the change manually'));
        return;
      }
    }

    this.drop_mviews(removedMaterializedViewNames, function (err2) {
      if (err2) {
        callback(err2);
        return;
      }

      if (removedIndexNames.length > 0) {
        var _message = util.format('Schema for table "%s" has removed indexes: %j, are you sure you want to drop them?', tableName, removedIndexNames);
        var _permission = _this10._confirm_migration(_message);
        if (_permission !== 'y') {
          callback(buildError('model.tablecreation.schemamismatch', tableName, 'migration suspended, please apply the change manually'));
          return;
        }
      }

      // remove altered indexes by index name
      _this10.drop_indexes(removedIndexNames, function (err3) {
        if (err3) {
          callback(err3);
          return;
        }

        // now apply alterOperations here
        async.eachSeries(alterOperations, function (alterOperation, next) {
          var permission = _this10._confirm_migration(alterOperation.message);
          if (permission !== 'y') {
            callback(buildError('model.tablecreation.schemamismatch', tableName, 'migration suspended, please apply the change manually'));
            return;
          }
          _this10.alter_table(alterOperation.operation, alterOperation.fieldName, alterOperation.type, next);
        }, function (err4) {
          if (err4) {
            callback(err4);
            return;
          }

          // add altered indexes
          // eslint-disable-next-line max-nested-callbacks
          _this10.create_indexes(addedIndexes, function (err5) {
            if (err5) {
              callback(err5);
              return;
            }

            // add altered custom indexes
            // eslint-disable-next-line max-nested-callbacks
            _this10.create_custom_indexes(addedCustomIndexes, function (err6) {
              if (err6) {
                callback(err6);
                return;
              }

              // add altered materialized_views
              _this10.create_mviews(addedMaterializedViews, callback);
            });
          });
        });
      });
    });
  },

  init_alter_operations(modelSchema, dbSchema, normalizedModelSchema, normalizedDBSchema, callback) {
    var _this11 = this;

    var properties = this._properties;
    var tableName = properties.table_name;
    var alterOperations = [];
    var differences = deepDiff(normalizedDBSchema.fields, normalizedModelSchema.fields);
    var droppedFields = false;
    async.eachSeries(differences, function (diff, next) {
      var fieldName = diff.path[0];
      if (diff.kind === 'N') {
        var message = util.format('Schema for table "%s" has added field "%s", are you sure you want to alter to add the field?', tableName, fieldName);
        alterOperations.push({
          fieldName,
          message,
          operation: 'ADD',
          type: parser.extract_altered_type(normalizedModelSchema, diff)
        });
        next();
        return;
      }
      if (diff.kind === 'D') {
        var _message2 = util.format('Schema for table "%s" has removed field "%s", all data in the field will lost, are you sure you want to alter to drop the field?', tableName, fieldName);
        alterOperations.push({
          fieldName,
          message: _message2,
          operation: 'DROP'
        });
        droppedFields = true;
        normalizer.remove_dependent_views_from_normalized_schema(normalizedDBSchema, dbSchema, fieldName);
        next();
        return;
      }
      if (diff.kind === 'E') {
        // check if the alter field type is possible, otherwise try D and then N
        if (diff.path[1] === 'type') {
          // check if field part of primary key
          if (normalizedDBSchema.key[0].includes(fieldName) || normalizedDBSchema.key.indexOf(fieldName) > 0) {
            // alter field type impossible
            next(new Error('alter_impossible'));
          } else if (['text', 'ascii', 'bigint', 'boolean', 'decimal', 'double', 'float', 'inet', 'int', 'timestamp', 'timeuuid', 'uuid', 'varchar', 'varint'].includes(diff.lhs) && diff.rhs === 'blob') {
            // alter field type possible
            var _message3 = util.format('Schema for table "%s" has new type for field "%s", are you sure you want to alter to update the field type?', tableName, fieldName);
            alterOperations.push({
              fieldName,
              message: _message3,
              operation: 'ALTER',
              type: diff.rhs
            });
            next();
          } else if (diff.lhs === 'int' && diff.rhs === 'varint') {
            // alter field type possible
            var _message4 = util.format('Schema for table "%s" has new type for field "%s", are you sure you want to alter to update the field type?', tableName, fieldName);
            alterOperations.push({
              fieldName,
              message: _message4,
              operation: 'ALTER',
              type: diff.rhs
            });
            next();
          } else if (diff.lhs === 'timeuuid' && diff.rhs === 'uuid') {
            // alter field type possible
            var _message5 = util.format('Schema for table "%s" has new type for field "%s", are you sure you want to alter to update the field type?', tableName, fieldName);
            alterOperations.push({
              fieldName,
              message: _message5,
              operation: 'ALTER',
              type: diff.rhs
            });
            next();
          } else {
            // alter type impossible
            var _message6 = util.format('Schema for table "%s" has new type for field "%s", all data in the field will be lost, are you sure you want to drop the field & recreate it?', tableName, fieldName);
            alterOperations.push({
              fieldName,
              message: _message6,
              operation: 'DROP'
            });
            alterOperations.push({
              fieldName,
              operation: 'ADD',
              type: parser.extract_altered_type(normalizedModelSchema, diff)
            });
            droppedFields = true;
            normalizer.remove_dependent_views_from_normalized_schema(normalizedDBSchema, dbSchema, fieldName);
            next();
          }
        } else {
          // alter type impossible
          var _message7 = util.format('Schema for table "%s" has new type for field "%s", all data in the field will be lost, are you sure you want to drop the field & recreate it?', tableName, fieldName);
          alterOperations.push({
            fieldName,
            message: _message7,
            operation: 'DROP'
          });
          alterOperations.push({
            fieldName,
            operation: 'ADD',
            type: parser.extract_altered_type(normalizedModelSchema, diff)
          });
          droppedFields = true;
          normalizer.remove_dependent_views_from_normalized_schema(normalizedDBSchema, dbSchema, fieldName);
          next();
        }
        return;
      }

      next();
    }, function (err) {
      if (err) {
        callback(err);
        return;
      }
      if (droppedFields && _this11._es_builder) {
        var indexName = `${properties.keyspace}_${properties.table_name}`;
        _this11._es_builder.delete_index(indexName, function () {
          _this11._apply_alter_operations(alterOperations, dbSchema, normalizedModelSchema, normalizedDBSchema, callback);
        });
        return;
      }
      _this11._apply_alter_operations(alterOperations, dbSchema, normalizedModelSchema, normalizedDBSchema, callback);
    });
  }
};

module.exports = TableBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,