'use strict';

var util = require('util');

var debug = require('debug')('express-cassandra');

var KeyspaceBuilder = function f(client) {
  this._client = client;
};

KeyspaceBuilder.prototype = {
  generate_replication_text(replicationOptions) {
    if (typeof replicationOptions === 'string') {
      return replicationOptions;
    }

    var properties = [];
    Object.keys(replicationOptions).forEach(function (k) {
      properties.push(util.format("'%s': '%s'", k, replicationOptions[k]));
    });

    return util.format('{%s}', properties.join(','));
  },

  create_keyspace(keyspaceName, defaultReplicationStrategy, callback) {
    var _this = this;

    var replicationText = this.generate_replication_text(defaultReplicationStrategy);

    var query = util.format('CREATE KEYSPACE IF NOT EXISTS "%s" WITH REPLICATION = %s;', keyspaceName, replicationText);
    debug('executing query: %s', query);
    this._client.execute(query, function (err) {
      _this._client.shutdown(function () {
        callback(err);
      });
    });
  },

  alter_keyspace(keyspaceName, defaultReplicationStrategy, callback) {
    var _this2 = this;

    var replicationText = this.generate_replication_text(defaultReplicationStrategy);

    var query = util.format('ALTER KEYSPACE "%s" WITH REPLICATION = %s;', keyspaceName, replicationText);
    debug('executing query: %s', query);
    this._client.execute(query, function (err) {
      _this2._client.shutdown(function () {
        // eslint-disable-next-line no-console
        console.warn('WARN: KEYSPACE ALTERED! Run the `nodetool repair` command on each affected node.');
        callback(err);
      });
    });
  },

  get_keyspace(keyspaceName, callback) {
    var _this3 = this;

    var query = util.format("SELECT * FROM system_schema.keyspaces WHERE keyspace_name = '%s';", keyspaceName);
    debug('executing query: %s', query);
    this._client.execute(query, function (err, result) {
      if (err) {
        _this3._client.shutdown(function () {
          callback(err);
        });
        return;
      }

      if (result.rows && result.rows.length > 0) {
        callback(null, result.rows[0]);
        return;
      }

      callback();
    });
  }

};

module.exports = KeyspaceBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy9rZXlzcGFjZS5qcyJdLCJuYW1lcyI6WyJ1dGlsIiwicmVxdWlyZSIsImRlYnVnIiwiS2V5c3BhY2VCdWlsZGVyIiwiZiIsImNsaWVudCIsIl9jbGllbnQiLCJwcm90b3R5cGUiLCJnZW5lcmF0ZV9yZXBsaWNhdGlvbl90ZXh0IiwicmVwbGljYXRpb25PcHRpb25zIiwicHJvcGVydGllcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiayIsInB1c2giLCJmb3JtYXQiLCJqb2luIiwiY3JlYXRlX2tleXNwYWNlIiwia2V5c3BhY2VOYW1lIiwiZGVmYXVsdFJlcGxpY2F0aW9uU3RyYXRlZ3kiLCJjYWxsYmFjayIsInJlcGxpY2F0aW9uVGV4dCIsInF1ZXJ5IiwiZXhlY3V0ZSIsImVyciIsInNodXRkb3duIiwiYWx0ZXJfa2V5c3BhY2UiLCJjb25zb2xlIiwid2FybiIsImdldF9rZXlzcGFjZSIsInJlc3VsdCIsInJvd3MiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLE9BQU9DLFFBQVEsTUFBUixDQUFiOztBQUVBLElBQU1DLFFBQVFELFFBQVEsT0FBUixFQUFpQixtQkFBakIsQ0FBZDs7QUFFQSxJQUFNRSxrQkFBa0IsU0FBU0MsQ0FBVCxDQUFXQyxNQUFYLEVBQW1CO0FBQ3pDLE9BQUtDLE9BQUwsR0FBZUQsTUFBZjtBQUNELENBRkQ7O0FBSUFGLGdCQUFnQkksU0FBaEIsR0FBNEI7QUFDMUJDLDRCQUEwQkMsa0JBQTFCLEVBQThDO0FBQzVDLFFBQUksT0FBT0Esa0JBQVAsS0FBOEIsUUFBbEMsRUFBNEM7QUFDMUMsYUFBT0Esa0JBQVA7QUFDRDs7QUFFRCxRQUFNQyxhQUFhLEVBQW5CO0FBQ0FDLFdBQU9DLElBQVAsQ0FBWUgsa0JBQVosRUFBZ0NJLE9BQWhDLENBQXdDLFVBQUNDLENBQUQsRUFBTztBQUM3Q0osaUJBQVdLLElBQVgsQ0FBZ0JmLEtBQUtnQixNQUFMLENBQVksWUFBWixFQUEwQkYsQ0FBMUIsRUFBNkJMLG1CQUFtQkssQ0FBbkIsQ0FBN0IsQ0FBaEI7QUFDRCxLQUZEOztBQUlBLFdBQU9kLEtBQUtnQixNQUFMLENBQVksTUFBWixFQUFvQk4sV0FBV08sSUFBWCxDQUFnQixHQUFoQixDQUFwQixDQUFQO0FBQ0QsR0FaeUI7O0FBYzFCQyxrQkFBZ0JDLFlBQWhCLEVBQThCQywwQkFBOUIsRUFBMERDLFFBQTFELEVBQW9FO0FBQUE7O0FBQ2xFLFFBQU1DLGtCQUFrQixLQUFLZCx5QkFBTCxDQUErQlksMEJBQS9CLENBQXhCOztBQUVBLFFBQU1HLFFBQVF2QixLQUFLZ0IsTUFBTCxDQUNaLDJEQURZLEVBRVpHLFlBRlksRUFHWkcsZUFIWSxDQUFkO0FBS0FwQixVQUFNLHFCQUFOLEVBQTZCcUIsS0FBN0I7QUFDQSxTQUFLakIsT0FBTCxDQUFha0IsT0FBYixDQUFxQkQsS0FBckIsRUFBNEIsVUFBQ0UsR0FBRCxFQUFTO0FBQ25DLFlBQUtuQixPQUFMLENBQWFvQixRQUFiLENBQXNCLFlBQU07QUFDMUJMLGlCQUFTSSxHQUFUO0FBQ0QsT0FGRDtBQUdELEtBSkQ7QUFLRCxHQTVCeUI7O0FBOEIxQkUsaUJBQWVSLFlBQWYsRUFBNkJDLDBCQUE3QixFQUF5REMsUUFBekQsRUFBbUU7QUFBQTs7QUFDakUsUUFBTUMsa0JBQWtCLEtBQUtkLHlCQUFMLENBQStCWSwwQkFBL0IsQ0FBeEI7O0FBRUEsUUFBTUcsUUFBUXZCLEtBQUtnQixNQUFMLENBQ1osNENBRFksRUFFWkcsWUFGWSxFQUdaRyxlQUhZLENBQWQ7QUFLQXBCLFVBQU0scUJBQU4sRUFBNkJxQixLQUE3QjtBQUNBLFNBQUtqQixPQUFMLENBQWFrQixPQUFiLENBQXFCRCxLQUFyQixFQUE0QixVQUFDRSxHQUFELEVBQVM7QUFDbkMsYUFBS25CLE9BQUwsQ0FBYW9CLFFBQWIsQ0FBc0IsWUFBTTtBQUMxQjtBQUNBRSxnQkFBUUMsSUFBUixDQUFhLGtGQUFiO0FBQ0FSLGlCQUFTSSxHQUFUO0FBQ0QsT0FKRDtBQUtELEtBTkQ7QUFPRCxHQTlDeUI7O0FBZ0QxQkssZUFBYVgsWUFBYixFQUEyQkUsUUFBM0IsRUFBcUM7QUFBQTs7QUFDbkMsUUFBTUUsUUFBUXZCLEtBQUtnQixNQUFMLENBQ1osbUVBRFksRUFFWkcsWUFGWSxDQUFkO0FBSUFqQixVQUFNLHFCQUFOLEVBQTZCcUIsS0FBN0I7QUFDQSxTQUFLakIsT0FBTCxDQUFha0IsT0FBYixDQUFxQkQsS0FBckIsRUFBNEIsVUFBQ0UsR0FBRCxFQUFNTSxNQUFOLEVBQWlCO0FBQzNDLFVBQUlOLEdBQUosRUFBUztBQUNQLGVBQUtuQixPQUFMLENBQWFvQixRQUFiLENBQXNCLFlBQU07QUFDMUJMLG1CQUFTSSxHQUFUO0FBQ0QsU0FGRDtBQUdBO0FBQ0Q7O0FBRUQsVUFBSU0sT0FBT0MsSUFBUCxJQUFlRCxPQUFPQyxJQUFQLENBQVlDLE1BQVosR0FBcUIsQ0FBeEMsRUFBMkM7QUFDekNaLGlCQUFTLElBQVQsRUFBZVUsT0FBT0MsSUFBUCxDQUFZLENBQVosQ0FBZjtBQUNBO0FBQ0Q7O0FBRURYO0FBQ0QsS0FkRDtBQWVEOztBQXJFeUIsQ0FBNUI7O0FBeUVBYSxPQUFPQyxPQUFQLEdBQWlCaEMsZUFBakIiLCJmaWxlIjoia2V5c3BhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2V4cHJlc3MtY2Fzc2FuZHJhJyk7XG5cbmNvbnN0IEtleXNwYWNlQnVpbGRlciA9IGZ1bmN0aW9uIGYoY2xpZW50KSB7XG4gIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbn07XG5cbktleXNwYWNlQnVpbGRlci5wcm90b3R5cGUgPSB7XG4gIGdlbmVyYXRlX3JlcGxpY2F0aW9uX3RleHQocmVwbGljYXRpb25PcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiByZXBsaWNhdGlvbk9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gcmVwbGljYXRpb25PcHRpb25zO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BlcnRpZXMgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhyZXBsaWNhdGlvbk9wdGlvbnMpLmZvckVhY2goKGspID0+IHtcbiAgICAgIHByb3BlcnRpZXMucHVzaCh1dGlsLmZvcm1hdChcIiclcyc6ICclcydcIiwgaywgcmVwbGljYXRpb25PcHRpb25zW2tdKSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdXRpbC5mb3JtYXQoJ3slc30nLCBwcm9wZXJ0aWVzLmpvaW4oJywnKSk7XG4gIH0sXG5cbiAgY3JlYXRlX2tleXNwYWNlKGtleXNwYWNlTmFtZSwgZGVmYXVsdFJlcGxpY2F0aW9uU3RyYXRlZ3ksIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgcmVwbGljYXRpb25UZXh0ID0gdGhpcy5nZW5lcmF0ZV9yZXBsaWNhdGlvbl90ZXh0KGRlZmF1bHRSZXBsaWNhdGlvblN0cmF0ZWd5KTtcblxuICAgIGNvbnN0IHF1ZXJ5ID0gdXRpbC5mb3JtYXQoXG4gICAgICAnQ1JFQVRFIEtFWVNQQUNFIElGIE5PVCBFWElTVFMgXCIlc1wiIFdJVEggUkVQTElDQVRJT04gPSAlczsnLFxuICAgICAga2V5c3BhY2VOYW1lLFxuICAgICAgcmVwbGljYXRpb25UZXh0LFxuICAgICk7XG4gICAgZGVidWcoJ2V4ZWN1dGluZyBxdWVyeTogJXMnLCBxdWVyeSk7XG4gICAgdGhpcy5fY2xpZW50LmV4ZWN1dGUocXVlcnksIChlcnIpID0+IHtcbiAgICAgIHRoaXMuX2NsaWVudC5zaHV0ZG93bigoKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcblxuICBhbHRlcl9rZXlzcGFjZShrZXlzcGFjZU5hbWUsIGRlZmF1bHRSZXBsaWNhdGlvblN0cmF0ZWd5LCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHJlcGxpY2F0aW9uVGV4dCA9IHRoaXMuZ2VuZXJhdGVfcmVwbGljYXRpb25fdGV4dChkZWZhdWx0UmVwbGljYXRpb25TdHJhdGVneSk7XG5cbiAgICBjb25zdCBxdWVyeSA9IHV0aWwuZm9ybWF0KFxuICAgICAgJ0FMVEVSIEtFWVNQQUNFIFwiJXNcIiBXSVRIIFJFUExJQ0FUSU9OID0gJXM7JyxcbiAgICAgIGtleXNwYWNlTmFtZSxcbiAgICAgIHJlcGxpY2F0aW9uVGV4dCxcbiAgICApO1xuICAgIGRlYnVnKCdleGVjdXRpbmcgcXVlcnk6ICVzJywgcXVlcnkpO1xuICAgIHRoaXMuX2NsaWVudC5leGVjdXRlKHF1ZXJ5LCAoZXJyKSA9PiB7XG4gICAgICB0aGlzLl9jbGllbnQuc2h1dGRvd24oKCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ1dBUk46IEtFWVNQQUNFIEFMVEVSRUQhIFJ1biB0aGUgYG5vZGV0b29sIHJlcGFpcmAgY29tbWFuZCBvbiBlYWNoIGFmZmVjdGVkIG5vZGUuJyk7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcblxuICBnZXRfa2V5c3BhY2Uoa2V5c3BhY2VOYW1lLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHF1ZXJ5ID0gdXRpbC5mb3JtYXQoXG4gICAgICBcIlNFTEVDVCAqIEZST00gc3lzdGVtX3NjaGVtYS5rZXlzcGFjZXMgV0hFUkUga2V5c3BhY2VfbmFtZSA9ICclcyc7XCIsXG4gICAgICBrZXlzcGFjZU5hbWUsXG4gICAgKTtcbiAgICBkZWJ1ZygnZXhlY3V0aW5nIHF1ZXJ5OiAlcycsIHF1ZXJ5KTtcbiAgICB0aGlzLl9jbGllbnQuZXhlY3V0ZShxdWVyeSwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRoaXMuX2NsaWVudC5zaHV0ZG93bigoKSA9PiB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdC5yb3dzICYmIHJlc3VsdC5yb3dzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0LnJvd3NbMF0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH0sXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5c3BhY2VCdWlsZGVyO1xuIl19