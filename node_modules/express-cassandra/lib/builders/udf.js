'use strict';

var util = require('util');
var _ = require('lodash');

var debug = require('debug')('express-cassandra');

var UdfBuilder = function f(client) {
  this._client = client;
};

UdfBuilder.prototype = {
  validate_definition(functionName, functionDefinition) {
    if (!functionDefinition.returnType) {
      throw new Error(util.format('No returnType defined for user defined function: %s', functionName));
    }
    if (!functionDefinition.language) {
      throw new Error(util.format('No language defined for user defined function: %s', functionName));
    }
    if (!functionDefinition.code) {
      throw new Error(util.format('No code defined for user defined function: %s', functionName));
    }
    if (functionDefinition.inputs && !_.isPlainObject(functionDefinition.inputs)) {
      throw new Error(util.format('inputs must be an object for user defined function: %s', functionName));
    }
    if (_.isArray(functionDefinition.inputs)) {
      throw new Error(util.format('inputs must be an object, not an array for user defined function: %s', functionName));
    }
  },

  create_udf(functionName, functionDefinition, callback) {
    var udfInputs = [];
    if (functionDefinition.inputs) {
      Object.keys(functionDefinition.inputs).forEach(function (input) {
        udfInputs.push(util.format('%s %s', input, functionDefinition.inputs[input]));
      });
    }
    var query = util.format("CREATE OR REPLACE FUNCTION %s (%s) CALLED ON NULL INPUT RETURNS %s LANGUAGE %s AS '%s';", functionName, udfInputs.toString(), functionDefinition.returnType, functionDefinition.language, functionDefinition.code);
    debug('executing query: %s', query);
    this._client.execute(query, function (err) {
      callback(err);
    });
  },

  get_udf(functionName, keyspaceName, callback) {
    var query = util.format("SELECT * FROM system_schema.functions WHERE keyspace_name = '%s' AND function_name = '%s';", keyspaceName, functionName.toLowerCase());
    debug('executing query: %s', query);
    this._client.execute(query, function (err, result) {
      if (err) {
        callback(err);
        return;
      }

      if (result.rows && result.rows.length > 0) {
        callback(null, result.rows[0]);
        return;
      }

      callback();
    });
  }
};

module.exports = UdfBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy91ZGYuanMiXSwibmFtZXMiOlsidXRpbCIsInJlcXVpcmUiLCJfIiwiZGVidWciLCJVZGZCdWlsZGVyIiwiZiIsImNsaWVudCIsIl9jbGllbnQiLCJwcm90b3R5cGUiLCJ2YWxpZGF0ZV9kZWZpbml0aW9uIiwiZnVuY3Rpb25OYW1lIiwiZnVuY3Rpb25EZWZpbml0aW9uIiwicmV0dXJuVHlwZSIsIkVycm9yIiwiZm9ybWF0IiwibGFuZ3VhZ2UiLCJjb2RlIiwiaW5wdXRzIiwiaXNQbGFpbk9iamVjdCIsImlzQXJyYXkiLCJjcmVhdGVfdWRmIiwiY2FsbGJhY2siLCJ1ZGZJbnB1dHMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImlucHV0IiwicHVzaCIsInF1ZXJ5IiwidG9TdHJpbmciLCJleGVjdXRlIiwiZXJyIiwiZ2V0X3VkZiIsImtleXNwYWNlTmFtZSIsInRvTG93ZXJDYXNlIiwicmVzdWx0Iiwicm93cyIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNQyxJQUFJRCxRQUFRLFFBQVIsQ0FBVjs7QUFFQSxJQUFNRSxRQUFRRixRQUFRLE9BQVIsRUFBaUIsbUJBQWpCLENBQWQ7O0FBRUEsSUFBTUcsYUFBYSxTQUFTQyxDQUFULENBQVdDLE1BQVgsRUFBbUI7QUFDcEMsT0FBS0MsT0FBTCxHQUFlRCxNQUFmO0FBQ0QsQ0FGRDs7QUFJQUYsV0FBV0ksU0FBWCxHQUF1QjtBQUNyQkMsc0JBQW9CQyxZQUFwQixFQUFrQ0Msa0JBQWxDLEVBQXNEO0FBQ3BELFFBQUksQ0FBQ0EsbUJBQW1CQyxVQUF4QixFQUFvQztBQUNsQyxZQUFPLElBQUlDLEtBQUosQ0FBVWIsS0FBS2MsTUFBTCxDQUFZLHFEQUFaLEVBQW1FSixZQUFuRSxDQUFWLENBQVA7QUFDRDtBQUNELFFBQUksQ0FBQ0MsbUJBQW1CSSxRQUF4QixFQUFrQztBQUNoQyxZQUFPLElBQUlGLEtBQUosQ0FBVWIsS0FBS2MsTUFBTCxDQUFZLG1EQUFaLEVBQWlFSixZQUFqRSxDQUFWLENBQVA7QUFDRDtBQUNELFFBQUksQ0FBQ0MsbUJBQW1CSyxJQUF4QixFQUE4QjtBQUM1QixZQUFPLElBQUlILEtBQUosQ0FBVWIsS0FBS2MsTUFBTCxDQUFZLCtDQUFaLEVBQTZESixZQUE3RCxDQUFWLENBQVA7QUFDRDtBQUNELFFBQUlDLG1CQUFtQk0sTUFBbkIsSUFBNkIsQ0FBQ2YsRUFBRWdCLGFBQUYsQ0FBZ0JQLG1CQUFtQk0sTUFBbkMsQ0FBbEMsRUFBOEU7QUFDNUUsWUFBTyxJQUFJSixLQUFKLENBQVViLEtBQUtjLE1BQUwsQ0FBWSx3REFBWixFQUFzRUosWUFBdEUsQ0FBVixDQUFQO0FBQ0Q7QUFDRCxRQUFJUixFQUFFaUIsT0FBRixDQUFVUixtQkFBbUJNLE1BQTdCLENBQUosRUFBMEM7QUFDeEMsWUFBTyxJQUFJSixLQUFKLENBQVViLEtBQUtjLE1BQUwsQ0FBWSxzRUFBWixFQUFvRkosWUFBcEYsQ0FBVixDQUFQO0FBQ0Q7QUFDRixHQWpCb0I7O0FBbUJyQlUsYUFBV1YsWUFBWCxFQUF5QkMsa0JBQXpCLEVBQTZDVSxRQUE3QyxFQUF1RDtBQUNyRCxRQUFNQyxZQUFZLEVBQWxCO0FBQ0EsUUFBSVgsbUJBQW1CTSxNQUF2QixFQUErQjtBQUM3Qk0sYUFBT0MsSUFBUCxDQUFZYixtQkFBbUJNLE1BQS9CLEVBQXVDUSxPQUF2QyxDQUErQyxVQUFDQyxLQUFELEVBQVc7QUFDeERKLGtCQUFVSyxJQUFWLENBQWUzQixLQUFLYyxNQUFMLENBQ2IsT0FEYSxFQUViWSxLQUZhLEVBR2JmLG1CQUFtQk0sTUFBbkIsQ0FBMEJTLEtBQTFCLENBSGEsQ0FBZjtBQUtELE9BTkQ7QUFPRDtBQUNELFFBQU1FLFFBQVE1QixLQUFLYyxNQUFMLENBQ1oseUZBRFksRUFFWkosWUFGWSxFQUdaWSxVQUFVTyxRQUFWLEVBSFksRUFJWmxCLG1CQUFtQkMsVUFKUCxFQUtaRCxtQkFBbUJJLFFBTFAsRUFNWkosbUJBQW1CSyxJQU5QLENBQWQ7QUFRQWIsVUFBTSxxQkFBTixFQUE2QnlCLEtBQTdCO0FBQ0EsU0FBS3JCLE9BQUwsQ0FBYXVCLE9BQWIsQ0FBcUJGLEtBQXJCLEVBQTRCLFVBQUNHLEdBQUQsRUFBUztBQUNuQ1YsZUFBU1UsR0FBVDtBQUNELEtBRkQ7QUFHRCxHQTFDb0I7O0FBNENyQkMsVUFBUXRCLFlBQVIsRUFBc0J1QixZQUF0QixFQUFvQ1osUUFBcEMsRUFBOEM7QUFDNUMsUUFBTU8sUUFBUTVCLEtBQUtjLE1BQUwsQ0FDWiw0RkFEWSxFQUVabUIsWUFGWSxFQUdadkIsYUFBYXdCLFdBQWIsRUFIWSxDQUFkO0FBS0EvQixVQUFNLHFCQUFOLEVBQTZCeUIsS0FBN0I7QUFDQSxTQUFLckIsT0FBTCxDQUFhdUIsT0FBYixDQUFxQkYsS0FBckIsRUFBNEIsVUFBQ0csR0FBRCxFQUFNSSxNQUFOLEVBQWlCO0FBQzNDLFVBQUlKLEdBQUosRUFBUztBQUNQVixpQkFBU1UsR0FBVDtBQUNBO0FBQ0Q7O0FBRUQsVUFBSUksT0FBT0MsSUFBUCxJQUFlRCxPQUFPQyxJQUFQLENBQVlDLE1BQVosR0FBcUIsQ0FBeEMsRUFBMkM7QUFDekNoQixpQkFBUyxJQUFULEVBQWVjLE9BQU9DLElBQVAsQ0FBWSxDQUFaLENBQWY7QUFDQTtBQUNEOztBQUVEZjtBQUNELEtBWkQ7QUFhRDtBQWhFb0IsQ0FBdkI7O0FBbUVBaUIsT0FBT0MsT0FBUCxHQUFpQm5DLFVBQWpCIiwiZmlsZSI6InVkZi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZXhwcmVzcy1jYXNzYW5kcmEnKTtcblxuY29uc3QgVWRmQnVpbGRlciA9IGZ1bmN0aW9uIGYoY2xpZW50KSB7XG4gIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbn07XG5cblVkZkJ1aWxkZXIucHJvdG90eXBlID0ge1xuICB2YWxpZGF0ZV9kZWZpbml0aW9uKGZ1bmN0aW9uTmFtZSwgZnVuY3Rpb25EZWZpbml0aW9uKSB7XG4gICAgaWYgKCFmdW5jdGlvbkRlZmluaXRpb24ucmV0dXJuVHlwZSkge1xuICAgICAgdGhyb3cgKG5ldyBFcnJvcih1dGlsLmZvcm1hdCgnTm8gcmV0dXJuVHlwZSBkZWZpbmVkIGZvciB1c2VyIGRlZmluZWQgZnVuY3Rpb246ICVzJywgZnVuY3Rpb25OYW1lKSkpO1xuICAgIH1cbiAgICBpZiAoIWZ1bmN0aW9uRGVmaW5pdGlvbi5sYW5ndWFnZSkge1xuICAgICAgdGhyb3cgKG5ldyBFcnJvcih1dGlsLmZvcm1hdCgnTm8gbGFuZ3VhZ2UgZGVmaW5lZCBmb3IgdXNlciBkZWZpbmVkIGZ1bmN0aW9uOiAlcycsIGZ1bmN0aW9uTmFtZSkpKTtcbiAgICB9XG4gICAgaWYgKCFmdW5jdGlvbkRlZmluaXRpb24uY29kZSkge1xuICAgICAgdGhyb3cgKG5ldyBFcnJvcih1dGlsLmZvcm1hdCgnTm8gY29kZSBkZWZpbmVkIGZvciB1c2VyIGRlZmluZWQgZnVuY3Rpb246ICVzJywgZnVuY3Rpb25OYW1lKSkpO1xuICAgIH1cbiAgICBpZiAoZnVuY3Rpb25EZWZpbml0aW9uLmlucHV0cyAmJiAhXy5pc1BsYWluT2JqZWN0KGZ1bmN0aW9uRGVmaW5pdGlvbi5pbnB1dHMpKSB7XG4gICAgICB0aHJvdyAobmV3IEVycm9yKHV0aWwuZm9ybWF0KCdpbnB1dHMgbXVzdCBiZSBhbiBvYmplY3QgZm9yIHVzZXIgZGVmaW5lZCBmdW5jdGlvbjogJXMnLCBmdW5jdGlvbk5hbWUpKSk7XG4gICAgfVxuICAgIGlmIChfLmlzQXJyYXkoZnVuY3Rpb25EZWZpbml0aW9uLmlucHV0cykpIHtcbiAgICAgIHRocm93IChuZXcgRXJyb3IodXRpbC5mb3JtYXQoJ2lucHV0cyBtdXN0IGJlIGFuIG9iamVjdCwgbm90IGFuIGFycmF5IGZvciB1c2VyIGRlZmluZWQgZnVuY3Rpb246ICVzJywgZnVuY3Rpb25OYW1lKSkpO1xuICAgIH1cbiAgfSxcblxuICBjcmVhdGVfdWRmKGZ1bmN0aW9uTmFtZSwgZnVuY3Rpb25EZWZpbml0aW9uLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHVkZklucHV0cyA9IFtdO1xuICAgIGlmIChmdW5jdGlvbkRlZmluaXRpb24uaW5wdXRzKSB7XG4gICAgICBPYmplY3Qua2V5cyhmdW5jdGlvbkRlZmluaXRpb24uaW5wdXRzKS5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgICB1ZGZJbnB1dHMucHVzaCh1dGlsLmZvcm1hdChcbiAgICAgICAgICAnJXMgJXMnLFxuICAgICAgICAgIGlucHV0LFxuICAgICAgICAgIGZ1bmN0aW9uRGVmaW5pdGlvbi5pbnB1dHNbaW5wdXRdLFxuICAgICAgICApKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBxdWVyeSA9IHV0aWwuZm9ybWF0KFxuICAgICAgXCJDUkVBVEUgT1IgUkVQTEFDRSBGVU5DVElPTiAlcyAoJXMpIENBTExFRCBPTiBOVUxMIElOUFVUIFJFVFVSTlMgJXMgTEFOR1VBR0UgJXMgQVMgJyVzJztcIixcbiAgICAgIGZ1bmN0aW9uTmFtZSxcbiAgICAgIHVkZklucHV0cy50b1N0cmluZygpLFxuICAgICAgZnVuY3Rpb25EZWZpbml0aW9uLnJldHVyblR5cGUsXG4gICAgICBmdW5jdGlvbkRlZmluaXRpb24ubGFuZ3VhZ2UsXG4gICAgICBmdW5jdGlvbkRlZmluaXRpb24uY29kZSxcbiAgICApO1xuICAgIGRlYnVnKCdleGVjdXRpbmcgcXVlcnk6ICVzJywgcXVlcnkpO1xuICAgIHRoaXMuX2NsaWVudC5leGVjdXRlKHF1ZXJ5LCAoZXJyKSA9PiB7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgIH0pO1xuICB9LFxuXG4gIGdldF91ZGYoZnVuY3Rpb25OYW1lLCBrZXlzcGFjZU5hbWUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgcXVlcnkgPSB1dGlsLmZvcm1hdChcbiAgICAgIFwiU0VMRUNUICogRlJPTSBzeXN0ZW1fc2NoZW1hLmZ1bmN0aW9ucyBXSEVSRSBrZXlzcGFjZV9uYW1lID0gJyVzJyBBTkQgZnVuY3Rpb25fbmFtZSA9ICclcyc7XCIsXG4gICAgICBrZXlzcGFjZU5hbWUsXG4gICAgICBmdW5jdGlvbk5hbWUudG9Mb3dlckNhc2UoKSxcbiAgICApO1xuICAgIGRlYnVnKCdleGVjdXRpbmcgcXVlcnk6ICVzJywgcXVlcnkpO1xuICAgIHRoaXMuX2NsaWVudC5leGVjdXRlKHF1ZXJ5LCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0LnJvd3MgJiYgcmVzdWx0LnJvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQucm93c1swXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVWRmQnVpbGRlcjtcbiJdfQ==